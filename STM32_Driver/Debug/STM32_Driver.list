
STM32_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008cc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a90  08000a98  00010a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a90  08000a90  00010a98  2**0
                  CONTENTS
  4 .ARM          00000000  08000a90  08000a90  00010a98  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a90  08000a98  00010a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a90  08000a90  00010a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a94  08000a94  00010a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000a98  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000a98  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010a98  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010ac8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000bbb  00000000  00000000  00010b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000347  00000000  00000000  000116c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d8  00000000  00000000  00011a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000097  00000000  00000000  00011ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000013f7  00000000  00000000  00011b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000fa8  00000000  00000000  00012f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005734  00000000  00000000  00013f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000002a4  00000000  00000000  00019654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000198f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000a78 	.word	0x08000a78

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000a78 	.word	0x08000a78

08000204 <DRV_GPIO_Pclkcontrol>:
 * @param                  - EnOrDi: Enable or Disable 
 * 
 * @return                 - void
********************************************************/
void DRV_GPIO_Pclkcontrol(GPIO_TypeDef_t* pGPIOx, EnOrDi_State EnOrDi)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi == ENABLE)
 8000210:	78fb      	ldrb	r3, [r7, #3]
 8000212:	2b01      	cmp	r3, #1
 8000214:	d157      	bne.n	80002c6 <DRV_GPIO_Pclkcontrol+0xc2>
    {
        if(pGPIOx == GPIOA) GPIOA_PCLK_EN();
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a59      	ldr	r2, [pc, #356]	; (8000380 <DRV_GPIO_Pclkcontrol+0x17c>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <DRV_GPIO_Pclkcontrol+0x28>
 800021e:	4b59      	ldr	r3, [pc, #356]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000222:	4a58      	ldr	r2, [pc, #352]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	6313      	str	r3, [r2, #48]	; 0x30
        else if(pGPIOx == GPIOF) GPIOF_PCLK_DI();
        else if(pGPIOx == GPIOG) GPIOG_PCLK_DI();
        else if(pGPIOx == GPIOH) GPIOH_PCLK_DI();
    }
    
}
 800022a:	e0a3      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOB) GPIOB_PCLK_EN();
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a56      	ldr	r2, [pc, #344]	; (8000388 <DRV_GPIO_Pclkcontrol+0x184>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <DRV_GPIO_Pclkcontrol+0x3e>
 8000234:	4b53      	ldr	r3, [pc, #332]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a52      	ldr	r2, [pc, #328]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000240:	e098      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOC) GPIOC_PCLK_EN();
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a51      	ldr	r2, [pc, #324]	; (800038c <DRV_GPIO_Pclkcontrol+0x188>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <DRV_GPIO_Pclkcontrol+0x54>
 800024a:	4b4e      	ldr	r3, [pc, #312]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4a4d      	ldr	r2, [pc, #308]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000250:	f043 0304 	orr.w	r3, r3, #4
 8000254:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000256:	e08d      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOD) GPIOD_PCLK_EN();
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a4d      	ldr	r2, [pc, #308]	; (8000390 <DRV_GPIO_Pclkcontrol+0x18c>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d106      	bne.n	800026e <DRV_GPIO_Pclkcontrol+0x6a>
 8000260:	4b48      	ldr	r3, [pc, #288]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a47      	ldr	r2, [pc, #284]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000266:	f043 0308 	orr.w	r3, r3, #8
 800026a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800026c:	e082      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOE) GPIOE_PCLK_EN();
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a48      	ldr	r2, [pc, #288]	; (8000394 <DRV_GPIO_Pclkcontrol+0x190>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <DRV_GPIO_Pclkcontrol+0x80>
 8000276:	4b43      	ldr	r3, [pc, #268]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027a:	4a42      	ldr	r2, [pc, #264]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 800027c:	f043 0310 	orr.w	r3, r3, #16
 8000280:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000282:	e077      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOF) GPIOF_PCLK_EN();
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a44      	ldr	r2, [pc, #272]	; (8000398 <DRV_GPIO_Pclkcontrol+0x194>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d106      	bne.n	800029a <DRV_GPIO_Pclkcontrol+0x96>
 800028c:	4b3d      	ldr	r3, [pc, #244]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4a3c      	ldr	r2, [pc, #240]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000292:	f043 0320 	orr.w	r3, r3, #32
 8000296:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000298:	e06c      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOG) GPIOG_PCLK_EN();
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a3f      	ldr	r2, [pc, #252]	; (800039c <DRV_GPIO_Pclkcontrol+0x198>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <DRV_GPIO_Pclkcontrol+0xac>
 80002a2:	4b38      	ldr	r3, [pc, #224]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a6:	4a37      	ldr	r2, [pc, #220]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 80002a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ae:	e061      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOH) GPIOH_PCLK_EN();
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a3b      	ldr	r2, [pc, #236]	; (80003a0 <DRV_GPIO_Pclkcontrol+0x19c>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d15d      	bne.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
 80002b8:	4b32      	ldr	r3, [pc, #200]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002bc:	4a31      	ldr	r2, [pc, #196]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 80002be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002c4:	e056      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        if(pGPIOx == GPIOA) GPIOA_PCLK_DI();
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a2d      	ldr	r2, [pc, #180]	; (8000380 <DRV_GPIO_Pclkcontrol+0x17c>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <DRV_GPIO_Pclkcontrol+0xd8>
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a2c      	ldr	r2, [pc, #176]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 80002d4:	f023 0301 	bic.w	r3, r3, #1
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002da:	e04b      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOB) GPIOB_PCLK_DI();
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a2a      	ldr	r2, [pc, #168]	; (8000388 <DRV_GPIO_Pclkcontrol+0x184>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d106      	bne.n	80002f2 <DRV_GPIO_Pclkcontrol+0xee>
 80002e4:	4b27      	ldr	r3, [pc, #156]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a26      	ldr	r2, [pc, #152]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 80002ea:	f023 0302 	bic.w	r3, r3, #2
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f0:	e040      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOC) GPIOC_PCLK_DI();
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a25      	ldr	r2, [pc, #148]	; (800038c <DRV_GPIO_Pclkcontrol+0x188>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <DRV_GPIO_Pclkcontrol+0x104>
 80002fa:	4b22      	ldr	r3, [pc, #136]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fe:	4a21      	ldr	r2, [pc, #132]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000300:	f023 0304 	bic.w	r3, r3, #4
 8000304:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000306:	e035      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOD) GPIOD_PCLK_DI();
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a21      	ldr	r2, [pc, #132]	; (8000390 <DRV_GPIO_Pclkcontrol+0x18c>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d106      	bne.n	800031e <DRV_GPIO_Pclkcontrol+0x11a>
 8000310:	4b1c      	ldr	r3, [pc, #112]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000314:	4a1b      	ldr	r2, [pc, #108]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000316:	f023 0308 	bic.w	r3, r3, #8
 800031a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031c:	e02a      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOE) GPIOE_PCLK_DI();
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a1c      	ldr	r2, [pc, #112]	; (8000394 <DRV_GPIO_Pclkcontrol+0x190>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <DRV_GPIO_Pclkcontrol+0x130>
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	4a16      	ldr	r2, [pc, #88]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 800032c:	f023 0310 	bic.w	r3, r3, #16
 8000330:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000332:	e01f      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOF) GPIOF_PCLK_DI();
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a18      	ldr	r2, [pc, #96]	; (8000398 <DRV_GPIO_Pclkcontrol+0x194>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <DRV_GPIO_Pclkcontrol+0x146>
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a10      	ldr	r2, [pc, #64]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000342:	f023 0320 	bic.w	r3, r3, #32
 8000346:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000348:	e014      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOG) GPIOG_PCLK_DI();
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a13      	ldr	r2, [pc, #76]	; (800039c <DRV_GPIO_Pclkcontrol+0x198>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <DRV_GPIO_Pclkcontrol+0x15c>
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a0b      	ldr	r2, [pc, #44]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035e:	e009      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOH) GPIOH_PCLK_DI();
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a0f      	ldr	r2, [pc, #60]	; (80003a0 <DRV_GPIO_Pclkcontrol+0x19c>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d105      	bne.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a05      	ldr	r2, [pc, #20]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 800036e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	40020000 	.word	0x40020000
 8000384:	40023800 	.word	0x40023800
 8000388:	40020400 	.word	0x40020400
 800038c:	40020800 	.word	0x40020800
 8000390:	40020c00 	.word	0x40020c00
 8000394:	40021000 	.word	0x40021000
 8000398:	40021400 	.word	0x40021400
 800039c:	40021800 	.word	0x40021800
 80003a0:	40021c00 	.word	0x40021c00

080003a4 <DRV_GPIO_Init>:
 * @param                  - pGPIOConfig: Pin configuration variable
 * 
 * @return                 - void
********************************************************/
void DRV_GPIO_Init(GPIO_TypeDef_t* pGPIOx, GPIO_PinConfig_t* pGPIOPinCofig)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
    uint32_t temp; 

    // Enable peripheral clock 
    DRV_GPIO_Pclkcontrol(pGPIOx, ENABLE);
 80003ae:	2101      	movs	r1, #1
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff27 	bl	8000204 <DRV_GPIO_Pclkcontrol>
    // 1. Configure mode 
    if(pGPIOPinCofig->PinMode <= GPIO_ANALOG)
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	785b      	ldrb	r3, [r3, #1]
 80003ba:	2b03      	cmp	r3, #3
 80003bc:	d81a      	bhi.n	80003f4 <DRV_GPIO_Init+0x50>
    {
        temp = (pGPIOPinCofig->PinMode << (2*pGPIOPinCofig->PinNumber));
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	785b      	ldrb	r3, [r3, #1]
 80003c2:	461a      	mov	r2, r3
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	005b      	lsls	r3, r3, #1
 80003ca:	fa02 f303 	lsl.w	r3, r2, r3
 80003ce:	613b      	str	r3, [r7, #16]
        pGPIOx->MODER &= ~(0x03 << pGPIOPinCofig->PinNumber); // clear bit 
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	683a      	ldr	r2, [r7, #0]
 80003d6:	7812      	ldrb	r2, [r2, #0]
 80003d8:	4611      	mov	r1, r2
 80003da:	2203      	movs	r2, #3
 80003dc:	408a      	lsls	r2, r1
 80003de:	43d2      	mvns	r2, r2
 80003e0:	401a      	ands	r2, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	601a      	str	r2, [r3, #0]
        pGPIOx->MODER |= temp; // set bit 
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	693b      	ldr	r3, [r7, #16]
 80003ec:	431a      	orrs	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	e0a7      	b.n	8000544 <DRV_GPIO_Init+0x1a0>
    }
    else
    {
        /* interrupts */
        if(pGPIOPinCofig->PinMode == GPIO_IT_FALLING)
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	785b      	ldrb	r3, [r3, #1]
 80003f8:	2b04      	cmp	r3, #4
 80003fa:	d117      	bne.n	800042c <DRV_GPIO_Init+0x88>
        {
            /* 1. Configure FTSR ( Falling Trigger Select Register) */
            EXTI->FTSR |= (1<< pGPIOPinCofig->PinNumber);// set FTSR bit
 80003fc:	4b97      	ldr	r3, [pc, #604]	; (800065c <DRV_GPIO_Init+0x2b8>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	683a      	ldr	r2, [r7, #0]
 8000402:	7812      	ldrb	r2, [r2, #0]
 8000404:	4611      	mov	r1, r2
 8000406:	2201      	movs	r2, #1
 8000408:	408a      	lsls	r2, r1
 800040a:	4611      	mov	r1, r2
 800040c:	4a93      	ldr	r2, [pc, #588]	; (800065c <DRV_GPIO_Init+0x2b8>)
 800040e:	430b      	orrs	r3, r1
 8000410:	60d3      	str	r3, [r2, #12]
            EXTI->RTSR &= ~(1<< pGPIOPinCofig->PinNumber);// clear RTSR bit
 8000412:	4b92      	ldr	r3, [pc, #584]	; (800065c <DRV_GPIO_Init+0x2b8>)
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	683a      	ldr	r2, [r7, #0]
 8000418:	7812      	ldrb	r2, [r2, #0]
 800041a:	4611      	mov	r1, r2
 800041c:	2201      	movs	r2, #1
 800041e:	408a      	lsls	r2, r1
 8000420:	43d2      	mvns	r2, r2
 8000422:	4611      	mov	r1, r2
 8000424:	4a8d      	ldr	r2, [pc, #564]	; (800065c <DRV_GPIO_Init+0x2b8>)
 8000426:	400b      	ands	r3, r1
 8000428:	6093      	str	r3, [r2, #8]
 800042a:	e035      	b.n	8000498 <DRV_GPIO_Init+0xf4>
        }
        else if(pGPIOPinCofig->PinMode == GPIO_IT_RISING)
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	785b      	ldrb	r3, [r3, #1]
 8000430:	2b05      	cmp	r3, #5
 8000432:	d117      	bne.n	8000464 <DRV_GPIO_Init+0xc0>
        {
            /* 1. Configure RTSR ( Falling Trigger Select Register) */
            EXTI->RTSR |= (1<< pGPIOPinCofig->PinNumber); // set RTSR bit
 8000434:	4b89      	ldr	r3, [pc, #548]	; (800065c <DRV_GPIO_Init+0x2b8>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	683a      	ldr	r2, [r7, #0]
 800043a:	7812      	ldrb	r2, [r2, #0]
 800043c:	4611      	mov	r1, r2
 800043e:	2201      	movs	r2, #1
 8000440:	408a      	lsls	r2, r1
 8000442:	4611      	mov	r1, r2
 8000444:	4a85      	ldr	r2, [pc, #532]	; (800065c <DRV_GPIO_Init+0x2b8>)
 8000446:	430b      	orrs	r3, r1
 8000448:	6093      	str	r3, [r2, #8]
            EXTI->FTSR &= ~(1<< pGPIOPinCofig->PinNumber);// clear FTSR bit
 800044a:	4b84      	ldr	r3, [pc, #528]	; (800065c <DRV_GPIO_Init+0x2b8>)
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	683a      	ldr	r2, [r7, #0]
 8000450:	7812      	ldrb	r2, [r2, #0]
 8000452:	4611      	mov	r1, r2
 8000454:	2201      	movs	r2, #1
 8000456:	408a      	lsls	r2, r1
 8000458:	43d2      	mvns	r2, r2
 800045a:	4611      	mov	r1, r2
 800045c:	4a7f      	ldr	r2, [pc, #508]	; (800065c <DRV_GPIO_Init+0x2b8>)
 800045e:	400b      	ands	r3, r1
 8000460:	60d3      	str	r3, [r2, #12]
 8000462:	e019      	b.n	8000498 <DRV_GPIO_Init+0xf4>
        }
        else if (pGPIOPinCofig->PinMode == GPIO_IT_FALLING_RISING)
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	785b      	ldrb	r3, [r3, #1]
 8000468:	2b06      	cmp	r3, #6
 800046a:	d115      	bne.n	8000498 <DRV_GPIO_Init+0xf4>
        {
            /* 1. Configure both register */
            EXTI->RTSR |= (1<< pGPIOPinCofig->PinNumber);// set RTSR bit
 800046c:	4b7b      	ldr	r3, [pc, #492]	; (800065c <DRV_GPIO_Init+0x2b8>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	683a      	ldr	r2, [r7, #0]
 8000472:	7812      	ldrb	r2, [r2, #0]
 8000474:	4611      	mov	r1, r2
 8000476:	2201      	movs	r2, #1
 8000478:	408a      	lsls	r2, r1
 800047a:	4611      	mov	r1, r2
 800047c:	4a77      	ldr	r2, [pc, #476]	; (800065c <DRV_GPIO_Init+0x2b8>)
 800047e:	430b      	orrs	r3, r1
 8000480:	6093      	str	r3, [r2, #8]
            EXTI->FTSR |= (1<< pGPIOPinCofig->PinNumber);// set FTSR bit            
 8000482:	4b76      	ldr	r3, [pc, #472]	; (800065c <DRV_GPIO_Init+0x2b8>)
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	683a      	ldr	r2, [r7, #0]
 8000488:	7812      	ldrb	r2, [r2, #0]
 800048a:	4611      	mov	r1, r2
 800048c:	2201      	movs	r2, #1
 800048e:	408a      	lsls	r2, r1
 8000490:	4611      	mov	r1, r2
 8000492:	4a72      	ldr	r2, [pc, #456]	; (800065c <DRV_GPIO_Init+0x2b8>)
 8000494:	430b      	orrs	r3, r1
 8000496:	60d3      	str	r3, [r2, #12]
        }

        // 2. Configure the GPIO port selection in SYSCFG_EXTIR
        uint8_t temp1 = pGPIOPinCofig->PinNumber/4;
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	089b      	lsrs	r3, r3, #2
 800049e:	75fb      	strb	r3, [r7, #23]
        uint8_t temp2 = pGPIOPinCofig->PinNumber%4;
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	f003 0303 	and.w	r3, r3, #3
 80004a8:	75bb      	strb	r3, [r7, #22]
        uint8_t portcode = GPIO_BASE_TO_CODE(pGPIOx);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a6c      	ldr	r2, [pc, #432]	; (8000660 <DRV_GPIO_Init+0x2bc>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d02b      	beq.n	800050a <DRV_GPIO_Init+0x166>
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a6b      	ldr	r2, [pc, #428]	; (8000664 <DRV_GPIO_Init+0x2c0>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d025      	beq.n	8000506 <DRV_GPIO_Init+0x162>
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a6a      	ldr	r2, [pc, #424]	; (8000668 <DRV_GPIO_Init+0x2c4>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d01f      	beq.n	8000502 <DRV_GPIO_Init+0x15e>
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4a69      	ldr	r2, [pc, #420]	; (800066c <DRV_GPIO_Init+0x2c8>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d019      	beq.n	80004fe <DRV_GPIO_Init+0x15a>
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a68      	ldr	r2, [pc, #416]	; (8000670 <DRV_GPIO_Init+0x2cc>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d013      	beq.n	80004fa <DRV_GPIO_Init+0x156>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a67      	ldr	r2, [pc, #412]	; (8000674 <DRV_GPIO_Init+0x2d0>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d00d      	beq.n	80004f6 <DRV_GPIO_Init+0x152>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4a66      	ldr	r2, [pc, #408]	; (8000678 <DRV_GPIO_Init+0x2d4>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d007      	beq.n	80004f2 <DRV_GPIO_Init+0x14e>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a65      	ldr	r2, [pc, #404]	; (800067c <DRV_GPIO_Init+0x2d8>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d101      	bne.n	80004ee <DRV_GPIO_Init+0x14a>
 80004ea:	2307      	movs	r3, #7
 80004ec:	e00e      	b.n	800050c <DRV_GPIO_Init+0x168>
 80004ee:	2300      	movs	r3, #0
 80004f0:	e00c      	b.n	800050c <DRV_GPIO_Init+0x168>
 80004f2:	2306      	movs	r3, #6
 80004f4:	e00a      	b.n	800050c <DRV_GPIO_Init+0x168>
 80004f6:	2305      	movs	r3, #5
 80004f8:	e008      	b.n	800050c <DRV_GPIO_Init+0x168>
 80004fa:	2304      	movs	r3, #4
 80004fc:	e006      	b.n	800050c <DRV_GPIO_Init+0x168>
 80004fe:	2303      	movs	r3, #3
 8000500:	e004      	b.n	800050c <DRV_GPIO_Init+0x168>
 8000502:	2302      	movs	r3, #2
 8000504:	e002      	b.n	800050c <DRV_GPIO_Init+0x168>
 8000506:	2301      	movs	r3, #1
 8000508:	e000      	b.n	800050c <DRV_GPIO_Init+0x168>
 800050a:	2300      	movs	r3, #0
 800050c:	757b      	strb	r3, [r7, #21]
        SYSCFG_PCLK_EN();
 800050e:	4b5c      	ldr	r3, [pc, #368]	; (8000680 <DRV_GPIO_Init+0x2dc>)
 8000510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000512:	4a5b      	ldr	r2, [pc, #364]	; (8000680 <DRV_GPIO_Init+0x2dc>)
 8000514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000518:	6453      	str	r3, [r2, #68]	; 0x44
        SYSCFG->EXTICR[temp1] = portcode << (4*temp2);
 800051a:	7d7a      	ldrb	r2, [r7, #21]
 800051c:	7dbb      	ldrb	r3, [r7, #22]
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	fa02 f103 	lsl.w	r1, r2, r3
 8000524:	4a57      	ldr	r2, [pc, #348]	; (8000684 <DRV_GPIO_Init+0x2e0>)
 8000526:	7dfb      	ldrb	r3, [r7, #23]
 8000528:	3302      	adds	r3, #2
 800052a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        // 3. Enable EXTI deliver using IMR
        EXTI->IMR |= (1<< pGPIOPinCofig->PinNumber);
 800052e:	4b4b      	ldr	r3, [pc, #300]	; (800065c <DRV_GPIO_Init+0x2b8>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	683a      	ldr	r2, [r7, #0]
 8000534:	7812      	ldrb	r2, [r2, #0]
 8000536:	4611      	mov	r1, r2
 8000538:	2201      	movs	r2, #1
 800053a:	408a      	lsls	r2, r1
 800053c:	4611      	mov	r1, r2
 800053e:	4a47      	ldr	r2, [pc, #284]	; (800065c <DRV_GPIO_Init+0x2b8>)
 8000540:	430b      	orrs	r3, r1
 8000542:	6013      	str	r3, [r2, #0]
        

    }
    temp = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	613b      	str	r3, [r7, #16]

    // 2. Configure speed
    temp = (pGPIOPinCofig->PinSpeed << (2*pGPIOPinCofig->PinNumber));
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	789b      	ldrb	r3, [r3, #2]
 800054c:	461a      	mov	r2, r3
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	fa02 f303 	lsl.w	r3, r2, r3
 8000558:	613b      	str	r3, [r7, #16]
    pGPIOx->OSPEEDER &= ~(0x03 << pGPIOPinCofig->PinNumber); // clear bit 
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	683a      	ldr	r2, [r7, #0]
 8000560:	7812      	ldrb	r2, [r2, #0]
 8000562:	4611      	mov	r1, r2
 8000564:	2203      	movs	r2, #3
 8000566:	408a      	lsls	r2, r1
 8000568:	43d2      	mvns	r2, r2
 800056a:	401a      	ands	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	609a      	str	r2, [r3, #8]
    pGPIOx->OSPEEDER |= temp; // set bit 
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	689a      	ldr	r2, [r3, #8]
 8000574:	693b      	ldr	r3, [r7, #16]
 8000576:	431a      	orrs	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	609a      	str	r2, [r3, #8]
    temp = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	613b      	str	r3, [r7, #16]

    // 3. Configure pull up pull down configuration
    temp = (pGPIOPinCofig->PinPUPDCtrl << (2*pGPIOPinCofig->PinNumber));
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	78db      	ldrb	r3, [r3, #3]
 8000584:	461a      	mov	r2, r3
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	fa02 f303 	lsl.w	r3, r2, r3
 8000590:	613b      	str	r3, [r7, #16]
    pGPIOx->PUPDR &= ~(0x03 << pGPIOPinCofig->PinNumber); // clear bit 
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	683a      	ldr	r2, [r7, #0]
 8000598:	7812      	ldrb	r2, [r2, #0]
 800059a:	4611      	mov	r1, r2
 800059c:	2203      	movs	r2, #3
 800059e:	408a      	lsls	r2, r1
 80005a0:	43d2      	mvns	r2, r2
 80005a2:	401a      	ands	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	60da      	str	r2, [r3, #12]
    pGPIOx->PUPDR |= temp; //set bit 
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	68da      	ldr	r2, [r3, #12]
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	431a      	orrs	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	60da      	str	r2, [r3, #12]
    temp = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]

    // 4. Configure output type 
    temp = (pGPIOPinCofig->PinOPType << pGPIOPinCofig->PinNumber);
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	791b      	ldrb	r3, [r3, #4]
 80005bc:	461a      	mov	r2, r3
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	fa02 f303 	lsl.w	r3, r2, r3
 80005c6:	613b      	str	r3, [r7, #16]
    pGPIOx->OTYPER &= ~(0x01 << pGPIOPinCofig->PinNumber); // clear bit 
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	7812      	ldrb	r2, [r2, #0]
 80005d0:	4611      	mov	r1, r2
 80005d2:	2201      	movs	r2, #1
 80005d4:	408a      	lsls	r2, r1
 80005d6:	43d2      	mvns	r2, r2
 80005d8:	401a      	ands	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	605a      	str	r2, [r3, #4]
    pGPIOx->OTYPER |= temp; //set bit
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	685a      	ldr	r2, [r3, #4]
 80005e2:	693b      	ldr	r3, [r7, #16]
 80005e4:	431a      	orrs	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	605a      	str	r2, [r3, #4]
    temp = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]

    // 5. Configure alternative function
    if(pGPIOPinCofig->PinMode == GPIO_ALTERNATE)
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	785b      	ldrb	r3, [r3, #1]
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	d12e      	bne.n	8000654 <DRV_GPIO_Init+0x2b0>
    {
        uint32_t temp1, temp2;
        temp1 = pGPIOPinCofig->PinNumber/8;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	08db      	lsrs	r3, r3, #3
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	60fb      	str	r3, [r7, #12]
        temp2 = pGPIOPinCofig->PinNumber%8;
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	f003 0307 	and.w	r3, r3, #7
 8000608:	60bb      	str	r3, [r7, #8]
        pGPIOx->AFR[temp1] &= ~(0xFF << (4*temp2));
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	68fa      	ldr	r2, [r7, #12]
 800060e:	3208      	adds	r2, #8
 8000610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	0092      	lsls	r2, r2, #2
 8000618:	21ff      	movs	r1, #255	; 0xff
 800061a:	fa01 f202 	lsl.w	r2, r1, r2
 800061e:	43d2      	mvns	r2, r2
 8000620:	ea03 0102 	and.w	r1, r3, r2
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	3208      	adds	r2, #8
 800062a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOx->AFR[temp1] |= (pGPIOPinCofig->PinAltFunction << (4*temp2));
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	3208      	adds	r2, #8
 8000634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000638:	683a      	ldr	r2, [r7, #0]
 800063a:	7952      	ldrb	r2, [r2, #5]
 800063c:	4611      	mov	r1, r2
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	0092      	lsls	r2, r2, #2
 8000642:	fa01 f202 	lsl.w	r2, r1, r2
 8000646:	ea43 0102 	orr.w	r1, r3, r2
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	3208      	adds	r2, #8
 8000650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

}
 8000654:	bf00      	nop
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40013c00 	.word	0x40013c00
 8000660:	40020000 	.word	0x40020000
 8000664:	40020400 	.word	0x40020400
 8000668:	40020800 	.word	0x40020800
 800066c:	40020c00 	.word	0x40020c00
 8000670:	40021000 	.word	0x40021000
 8000674:	40021400 	.word	0x40021400
 8000678:	40021800 	.word	0x40021800
 800067c:	40021c00 	.word	0x40021c00
 8000680:	40023800 	.word	0x40023800
 8000684:	40013800 	.word	0x40013800

08000688 <DRV_GPIO_WritePin>:
 * @param                  - Value: SET or RESET level to attached pin
 * 
 * @return                 - void
********************************************************/
void DRV_GPIO_WritePin(GPIO_TypeDef_t* pGPIOx, uint8_t PinNumber ,Pin_State Value)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
 8000694:	4613      	mov	r3, r2
 8000696:	70bb      	strb	r3, [r7, #2]
    if(Value == SET_PIN || Value == SET)
 8000698:	78bb      	ldrb	r3, [r7, #2]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d002      	beq.n	80006a4 <DRV_GPIO_WritePin+0x1c>
 800069e:	78bb      	ldrb	r3, [r7, #2]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d109      	bne.n	80006b8 <DRV_GPIO_WritePin+0x30>
    {
        pGPIOx->ODR |= (1<<PinNumber);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	78fa      	ldrb	r2, [r7, #3]
 80006aa:	2101      	movs	r1, #1
 80006ac:	fa01 f202 	lsl.w	r2, r1, r2
 80006b0:	431a      	orrs	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	615a      	str	r2, [r3, #20]
 80006b6:	e00a      	b.n	80006ce <DRV_GPIO_WritePin+0x46>
    }
    else
    {
        pGPIOx->ODR &= ~(1<<PinNumber);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	78fa      	ldrb	r2, [r7, #3]
 80006be:	2101      	movs	r1, #1
 80006c0:	fa01 f202 	lsl.w	r2, r1, r2
 80006c4:	43d2      	mvns	r2, r2
 80006c6:	401a      	ands	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	615a      	str	r2, [r3, #20]
    }
}
 80006cc:	bf00      	nop
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <DRV_GPIO_TogglePin>:
 * @param                  - PinNumber: Pin number of the MCU
 * 
 * @return                 - void
********************************************************/
void DRV_GPIO_TogglePin(GPIO_TypeDef_t* pGPIOx, uint8_t PinNumber)
{
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
 80006e2:	460b      	mov	r3, r1
 80006e4:	70fb      	strb	r3, [r7, #3]
    pGPIOx->ODR ^= (1 << PinNumber);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	78fa      	ldrb	r2, [r7, #3]
 80006ec:	2101      	movs	r1, #1
 80006ee:	fa01 f202 	lsl.w	r2, r1, r2
 80006f2:	405a      	eors	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	615a      	str	r2, [r3, #20]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <DRV_GPIO_IRQConfig>:
 * @param                  - EnOrDi: Enable or Disable interrupts
 * 
 * @return                 - void
********************************************************/
void DRV_GPIO_IRQConfig(uint8_t IRQNumber, EnOrDi_State EnOrDi)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	460a      	mov	r2, r1
 800070e:	71fb      	strb	r3, [r7, #7]
 8000710:	4613      	mov	r3, r2
 8000712:	71bb      	strb	r3, [r7, #6]
    if( EnOrDi == ENABLE)
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d133      	bne.n	8000782 <DRV_GPIO_IRQConfig+0x7e>
    {
        if(IRQNumber <= 31)
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b1f      	cmp	r3, #31
 800071e:	d80a      	bhi.n	8000736 <DRV_GPIO_IRQConfig+0x32>
        {
            // ISER0 register
            *NVIC_ISER_0 |= (1 << IRQNumber);
 8000720:	4b35      	ldr	r3, [pc, #212]	; (80007f8 <DRV_GPIO_IRQConfig+0xf4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	79fa      	ldrb	r2, [r7, #7]
 8000726:	2101      	movs	r1, #1
 8000728:	fa01 f202 	lsl.w	r2, r1, r2
 800072c:	4611      	mov	r1, r2
 800072e:	4a32      	ldr	r2, [pc, #200]	; (80007f8 <DRV_GPIO_IRQConfig+0xf4>)
 8000730:	430b      	orrs	r3, r1
 8000732:	6013      	str	r3, [r2, #0]
        else if (IRQNumber >= 64 && IRQNumber <96)
        {
            *NVIC_ICER_2 |= (1 << (IRQNumber % 64));
        }
    }
}
 8000734:	e059      	b.n	80007ea <DRV_GPIO_IRQConfig+0xe6>
        else if (IRQNumber > 31 && IRQNumber < 64)
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b1f      	cmp	r3, #31
 800073a:	d90f      	bls.n	800075c <DRV_GPIO_IRQConfig+0x58>
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	2b3f      	cmp	r3, #63	; 0x3f
 8000740:	d80c      	bhi.n	800075c <DRV_GPIO_IRQConfig+0x58>
            *NVIC_ISER_1 |= (1 << (IRQNumber % 32));
 8000742:	4b2e      	ldr	r3, [pc, #184]	; (80007fc <DRV_GPIO_IRQConfig+0xf8>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	79fa      	ldrb	r2, [r7, #7]
 8000748:	f002 021f 	and.w	r2, r2, #31
 800074c:	2101      	movs	r1, #1
 800074e:	fa01 f202 	lsl.w	r2, r1, r2
 8000752:	4611      	mov	r1, r2
 8000754:	4a29      	ldr	r2, [pc, #164]	; (80007fc <DRV_GPIO_IRQConfig+0xf8>)
 8000756:	430b      	orrs	r3, r1
 8000758:	6013      	str	r3, [r2, #0]
 800075a:	e046      	b.n	80007ea <DRV_GPIO_IRQConfig+0xe6>
        else if (IRQNumber >= 64 && IRQNumber <96)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b3f      	cmp	r3, #63	; 0x3f
 8000760:	d943      	bls.n	80007ea <DRV_GPIO_IRQConfig+0xe6>
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b5f      	cmp	r3, #95	; 0x5f
 8000766:	d840      	bhi.n	80007ea <DRV_GPIO_IRQConfig+0xe6>
            *NVIC_ISER_2 |= (1 << (IRQNumber % 64));
 8000768:	4b25      	ldr	r3, [pc, #148]	; (8000800 <DRV_GPIO_IRQConfig+0xfc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	79fa      	ldrb	r2, [r7, #7]
 800076e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000772:	2101      	movs	r1, #1
 8000774:	fa01 f202 	lsl.w	r2, r1, r2
 8000778:	4611      	mov	r1, r2
 800077a:	4a21      	ldr	r2, [pc, #132]	; (8000800 <DRV_GPIO_IRQConfig+0xfc>)
 800077c:	430b      	orrs	r3, r1
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	e033      	b.n	80007ea <DRV_GPIO_IRQConfig+0xe6>
        if(IRQNumber <= 31)
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b1f      	cmp	r3, #31
 8000786:	d80a      	bhi.n	800079e <DRV_GPIO_IRQConfig+0x9a>
            *NVIC_ICER_0 |= (1 << IRQNumber);
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <DRV_GPIO_IRQConfig+0x100>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	2101      	movs	r1, #1
 8000790:	fa01 f202 	lsl.w	r2, r1, r2
 8000794:	4611      	mov	r1, r2
 8000796:	4a1b      	ldr	r2, [pc, #108]	; (8000804 <DRV_GPIO_IRQConfig+0x100>)
 8000798:	430b      	orrs	r3, r1
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	e025      	b.n	80007ea <DRV_GPIO_IRQConfig+0xe6>
        else if (IRQNumber > 31 && IRQNumber < 64)
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b1f      	cmp	r3, #31
 80007a2:	d90f      	bls.n	80007c4 <DRV_GPIO_IRQConfig+0xc0>
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	2b3f      	cmp	r3, #63	; 0x3f
 80007a8:	d80c      	bhi.n	80007c4 <DRV_GPIO_IRQConfig+0xc0>
            *NVIC_ICER_1 |= (1 << (IRQNumber % 32));
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <DRV_GPIO_IRQConfig+0x104>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	79fa      	ldrb	r2, [r7, #7]
 80007b0:	f002 021f 	and.w	r2, r2, #31
 80007b4:	2101      	movs	r1, #1
 80007b6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ba:	4611      	mov	r1, r2
 80007bc:	4a12      	ldr	r2, [pc, #72]	; (8000808 <DRV_GPIO_IRQConfig+0x104>)
 80007be:	430b      	orrs	r3, r1
 80007c0:	6013      	str	r3, [r2, #0]
 80007c2:	e012      	b.n	80007ea <DRV_GPIO_IRQConfig+0xe6>
        else if (IRQNumber >= 64 && IRQNumber <96)
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	2b3f      	cmp	r3, #63	; 0x3f
 80007c8:	d90f      	bls.n	80007ea <DRV_GPIO_IRQConfig+0xe6>
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b5f      	cmp	r3, #95	; 0x5f
 80007ce:	d80c      	bhi.n	80007ea <DRV_GPIO_IRQConfig+0xe6>
            *NVIC_ICER_2 |= (1 << (IRQNumber % 64));
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <DRV_GPIO_IRQConfig+0x108>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	79fa      	ldrb	r2, [r7, #7]
 80007d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007da:	2101      	movs	r1, #1
 80007dc:	fa01 f202 	lsl.w	r2, r1, r2
 80007e0:	4611      	mov	r1, r2
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <DRV_GPIO_IRQConfig+0x108>)
 80007e4:	430b      	orrs	r3, r1
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	e7ff      	b.n	80007ea <DRV_GPIO_IRQConfig+0xe6>
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000e100 	.word	0xe000e100
 80007fc:	e000e104 	.word	0xe000e104
 8000800:	e000e108 	.word	0xe000e108
 8000804:	e000e180 	.word	0xe000e180
 8000808:	e000e184 	.word	0xe000e184
 800080c:	e000e188 	.word	0xe000e188

08000810 <DRV_GPIO_IRQPriorityCFG>:
 * @param                  - IRQPriority: Priority of IRQ
 * 
 * @return                 - void
********************************************************/
void DRV_GPIO_IRQPriorityCFG(uint8_t IRQNumber, uint8_t IRQPriority)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	460a      	mov	r2, r1
 800081a:	71fb      	strb	r3, [r7, #7]
 800081c:	4613      	mov	r3, r2
 800081e:	71bb      	strb	r3, [r7, #6]
    //1. determine IPR register 
    uint8_t IPRx = IRQNumber/4; //IPR register
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	089b      	lsrs	r3, r3, #2
 8000824:	73fb      	strb	r3, [r7, #15]
    uint8_t IPRxSec = IRQNumber%4; // IPR sections
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f003 0303 	and.w	r3, r3, #3
 800082c:	73bb      	strb	r3, [r7, #14]
    uint8_t shift_amount = (8 * IPRxSec) + (8 - NUM_PR_BITS_IMPLEMENTED);
 800082e:	7bbb      	ldrb	r3, [r7, #14]
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	b2db      	uxtb	r3, r3
 8000834:	3304      	adds	r3, #4
 8000836:	737b      	strb	r3, [r7, #13]
    *(NVIC_PR_BASE + (IPRx*4)) |= (IRQPriority << shift_amount);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	011b      	lsls	r3, r3, #4
 800083c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000840:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	79b9      	ldrb	r1, [r7, #6]
 8000848:	7b7b      	ldrb	r3, [r7, #13]
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	4619      	mov	r1, r3
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	011b      	lsls	r3, r3, #4
 8000854:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000858:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800085c:	430a      	orrs	r2, r1
 800085e:	601a      	str	r2, [r3, #0]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <DRV_GPIO_IRQHandling>:
 * @param                  - PinNumber: pin number
 * 
 * @return                 - void
********************************************************/
void DRV_GPIO_IRQHandling(uint8_t PinNumber)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
    // Clear the EXTI PR register corresponding to pin number 
    if(EXTI->PR & (1 << PinNumber))
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <DRV_GPIO_IRQHandling+0x3c>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	79fa      	ldrb	r2, [r7, #7]
 800087c:	2101      	movs	r1, #1
 800087e:	fa01 f202 	lsl.w	r2, r1, r2
 8000882:	4013      	ands	r3, r2
 8000884:	2b00      	cmp	r3, #0
 8000886:	d009      	beq.n	800089c <DRV_GPIO_IRQHandling+0x30>
    {
        // clear 
        EXTI->PR |= (1<<PinNumber);
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <DRV_GPIO_IRQHandling+0x3c>)
 800088a:	695b      	ldr	r3, [r3, #20]
 800088c:	79fa      	ldrb	r2, [r7, #7]
 800088e:	2101      	movs	r1, #1
 8000890:	fa01 f202 	lsl.w	r2, r1, r2
 8000894:	4611      	mov	r1, r2
 8000896:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <DRV_GPIO_IRQHandling+0x3c>)
 8000898:	430b      	orrs	r3, r1
 800089a:	6153      	str	r3, [r2, #20]
    }
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	40013c00 	.word	0x40013c00

080008ac <delay>:
#include <stm32f446xx_gpio_driver.h>

volatile uint8_t mode = 0; 

void delay(uint32_t timeout)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
    for(uint32_t i = 0; i < (timeout*1000); i++);
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	e002      	b.n	80008c0 <delay+0x14>
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	3301      	adds	r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008c6:	fb02 f303 	mul.w	r3, r2, r3
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d3f4      	bcc.n	80008ba <delay+0xe>
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
	...

080008e0 <main>:
 * @brief Main function
 * @details This function is the entry point of the application.
 * @retval int
 */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
    GPIO_Init();
 80008e4:	f000 f82c 	bl	8000940 <GPIO_Init>
    IRQ_INIT();
 80008e8:	f000 f85c 	bl	80009a4 <IRQ_INIT>
    while (1)
    {
        switch (mode)
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <main+0x58>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d012      	beq.n	800091c <main+0x3c>
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	dc19      	bgt.n	800092e <main+0x4e>
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d002      	beq.n	8000904 <main+0x24>
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d006      	beq.n	8000910 <main+0x30>
 8000902:	e014      	b.n	800092e <main+0x4e>
        {
        case 0:
            DRV_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000904:	2201      	movs	r2, #1
 8000906:	2105      	movs	r1, #5
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <main+0x5c>)
 800090a:	f7ff febd 	bl	8000688 <DRV_GPIO_WritePin>
            break;
 800090e:	e012      	b.n	8000936 <main+0x56>

        case 1:
            DRV_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2105      	movs	r1, #5
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <main+0x5c>)
 8000916:	f7ff feb7 	bl	8000688 <DRV_GPIO_WritePin>
            break;
 800091a:	e00c      	b.n	8000936 <main+0x56>

        case 2:
            DRV_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800091c:	2105      	movs	r1, #5
 800091e:	4807      	ldr	r0, [pc, #28]	; (800093c <main+0x5c>)
 8000920:	f7ff fedb 	bl	80006da <DRV_GPIO_TogglePin>
            delay(500);
 8000924:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000928:	f7ff ffc0 	bl	80008ac <delay>
            break;
 800092c:	e003      	b.n	8000936 <main+0x56>

        default:
            mode = 0;
 800092e:	4b02      	ldr	r3, [pc, #8]	; (8000938 <main+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
            break;
 8000934:	bf00      	nop
        switch (mode)
 8000936:	e7d9      	b.n	80008ec <main+0xc>
 8000938:	2000001c 	.word	0x2000001c
 800093c:	40020000 	.word	0x40020000

08000940 <GPIO_Init>:
 * @brief  Initializes the GPIO pins
 * @param  None
 * @retval None
 */
void GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
    GPIO_PinConfig_t GPIO_Struct = {0};
 8000946:	463b      	mov	r3, r7
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	809a      	strh	r2, [r3, #4]

    // LED PA5
    GPIO_Struct.PinNumber   = GPIO_PIN_5;
 800094e:	2305      	movs	r3, #5
 8000950:	703b      	strb	r3, [r7, #0]
    GPIO_Struct.PinMode     = GPIO_OUTPUT;
 8000952:	2301      	movs	r3, #1
 8000954:	707b      	strb	r3, [r7, #1]
    GPIO_Struct.PinSpeed    = FAST;
 8000956:	2302      	movs	r3, #2
 8000958:	70bb      	strb	r3, [r7, #2]
    GPIO_Struct.PinOPType   = PushPull;
 800095a:	2300      	movs	r3, #0
 800095c:	713b      	strb	r3, [r7, #4]
    GPIO_Struct.PinPUPDCtrl = NoPUPD;
 800095e:	2300      	movs	r3, #0
 8000960:	70fb      	strb	r3, [r7, #3]
    DRV_GPIO_Pclkcontrol(GPIOA, ENABLE);
 8000962:	2101      	movs	r1, #1
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <GPIO_Init+0x5c>)
 8000966:	f7ff fc4d 	bl	8000204 <DRV_GPIO_Pclkcontrol>
    DRV_GPIO_Init(GPIOA, &GPIO_Struct);
 800096a:	463b      	mov	r3, r7
 800096c:	4619      	mov	r1, r3
 800096e:	480b      	ldr	r0, [pc, #44]	; (800099c <GPIO_Init+0x5c>)
 8000970:	f7ff fd18 	bl	80003a4 <DRV_GPIO_Init>

    // Button PC13
    GPIO_Struct.PinNumber   = GPIO_PIN_13;
 8000974:	230d      	movs	r3, #13
 8000976:	703b      	strb	r3, [r7, #0]
    GPIO_Struct.PinMode     = GPIO_IT_FALLING;
 8000978:	2304      	movs	r3, #4
 800097a:	707b      	strb	r3, [r7, #1]
    GPIO_Struct.PinPUPDCtrl = PullUp; 
 800097c:	2301      	movs	r3, #1
 800097e:	70fb      	strb	r3, [r7, #3]
    DRV_GPIO_Pclkcontrol(GPIOC, ENABLE);
 8000980:	2101      	movs	r1, #1
 8000982:	4807      	ldr	r0, [pc, #28]	; (80009a0 <GPIO_Init+0x60>)
 8000984:	f7ff fc3e 	bl	8000204 <DRV_GPIO_Pclkcontrol>
    DRV_GPIO_Init(GPIOC, &GPIO_Struct);
 8000988:	463b      	mov	r3, r7
 800098a:	4619      	mov	r1, r3
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <GPIO_Init+0x60>)
 800098e:	f7ff fd09 	bl	80003a4 <DRV_GPIO_Init>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40020000 	.word	0x40020000
 80009a0:	40020800 	.word	0x40020800

080009a4 <IRQ_INIT>:
/**
 * @brief Initialize the interrupt
 * @details This function initializes the interrupt used by the application.
 */
void IRQ_INIT(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
    DRV_GPIO_IRQConfig(IRQ_NO_EXTI15_10, ENABLE);
 80009a8:	2101      	movs	r1, #1
 80009aa:	2028      	movs	r0, #40	; 0x28
 80009ac:	f7ff feaa 	bl	8000704 <DRV_GPIO_IRQConfig>
    DRV_GPIO_IRQPriorityCFG(IRQ_NO_EXTI15_10, 15);
 80009b0:	210f      	movs	r1, #15
 80009b2:	2028      	movs	r0, #40	; 0x28
 80009b4:	f7ff ff2c 	bl	8000810 <DRV_GPIO_IRQPriorityCFG>
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <EXTI15_10_IRQHandler>:
 * This function is the interrupt service routine for EXTI15_10. It is triggered
 * whenever the button connected to PC13 is pressed. The function increments the
 * mode variable, which is used to switch between different modes of operation.
 */
void EXTI15_10_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
    DRV_GPIO_IRQHandling(GPIO_PIN_13);
 80009c0:	200d      	movs	r0, #13
 80009c2:	f7ff ff53 	bl	800086c <DRV_GPIO_IRQHandling>
    mode++;
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <EXTI15_10_IRQHandler+0x1c>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	3301      	adds	r3, #1
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b01      	ldr	r3, [pc, #4]	; (80009d8 <EXTI15_10_IRQHandler+0x1c>)
 80009d2:	701a      	strb	r2, [r3, #0]
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	2000001c 	.word	0x2000001c

080009dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80009e6:	490d      	ldr	r1, [pc, #52]	; (8000a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e8:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <LoopForever+0xe>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009fc:	4c0a      	ldr	r4, [pc, #40]	; (8000a28 <LoopForever+0x16>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a0a:	f000 f811 	bl	8000a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0e:	f7ff ff67 	bl	80008e0 <main>

08000a12 <LoopForever>:

LoopForever:
  b LoopForever
 8000a12:	e7fe      	b.n	8000a12 <LoopForever>
  ldr   r0, =_estack
 8000a14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a20:	08000a98 	.word	0x08000a98
  ldr r2, =_sbss
 8000a24:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a28:	20000020 	.word	0x20000020

08000a2c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC_IRQHandler>
	...

08000a30 <__libc_init_array>:
 8000a30:	b570      	push	{r4, r5, r6, lr}
 8000a32:	4d0d      	ldr	r5, [pc, #52]	; (8000a68 <__libc_init_array+0x38>)
 8000a34:	4c0d      	ldr	r4, [pc, #52]	; (8000a6c <__libc_init_array+0x3c>)
 8000a36:	1b64      	subs	r4, r4, r5
 8000a38:	10a4      	asrs	r4, r4, #2
 8000a3a:	2600      	movs	r6, #0
 8000a3c:	42a6      	cmp	r6, r4
 8000a3e:	d109      	bne.n	8000a54 <__libc_init_array+0x24>
 8000a40:	4d0b      	ldr	r5, [pc, #44]	; (8000a70 <__libc_init_array+0x40>)
 8000a42:	4c0c      	ldr	r4, [pc, #48]	; (8000a74 <__libc_init_array+0x44>)
 8000a44:	f000 f818 	bl	8000a78 <_init>
 8000a48:	1b64      	subs	r4, r4, r5
 8000a4a:	10a4      	asrs	r4, r4, #2
 8000a4c:	2600      	movs	r6, #0
 8000a4e:	42a6      	cmp	r6, r4
 8000a50:	d105      	bne.n	8000a5e <__libc_init_array+0x2e>
 8000a52:	bd70      	pop	{r4, r5, r6, pc}
 8000a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a58:	4798      	blx	r3
 8000a5a:	3601      	adds	r6, #1
 8000a5c:	e7ee      	b.n	8000a3c <__libc_init_array+0xc>
 8000a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a62:	4798      	blx	r3
 8000a64:	3601      	adds	r6, #1
 8000a66:	e7f2      	b.n	8000a4e <__libc_init_array+0x1e>
 8000a68:	08000a90 	.word	0x08000a90
 8000a6c:	08000a90 	.word	0x08000a90
 8000a70:	08000a90 	.word	0x08000a90
 8000a74:	08000a94 	.word	0x08000a94

08000a78 <_init>:
 8000a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7a:	bf00      	nop
 8000a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a7e:	bc08      	pop	{r3}
 8000a80:	469e      	mov	lr, r3
 8000a82:	4770      	bx	lr

08000a84 <_fini>:
 8000a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a86:	bf00      	nop
 8000a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a8a:	bc08      	pop	{r3}
 8000a8c:	469e      	mov	lr, r3
 8000a8e:	4770      	bx	lr
