
STM32_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000954  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b18  08000b18  00010b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b24  08000b24  00010b2c  2**0
                  CONTENTS
  4 .ARM          00000000  08000b24  08000b24  00010b2c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b24  08000b2c  00010b2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b24  08000b24  00010b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b28  08000b28  00010b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000b2c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000b2c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010b2c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010b5c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001333  00000000  00000000  00010b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000047f  00000000  00000000  00011ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00012358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d7  00000000  00000000  00012488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001ebe  00000000  00000000  0001255f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000183e  00000000  00000000  0001441d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008d59  00000000  00000000  00015c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000400  00000000  00000000  0001e9b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0001edb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000b00 	.word	0x08000b00

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000b00 	.word	0x08000b00

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <DRV_GPIO_Pclkcontrol>:
 * @param                  - EnOrDi: Enable or Disable 
 * 
 * @return                 - void
********************************************************/
void DRV_GPIO_Pclkcontrol(GPIO_TypeDef_t* pGPIOx, EnOrDi_State EnOrDi)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	460b      	mov	r3, r1
 800021e:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi == ENABLE)
 8000220:	78fb      	ldrb	r3, [r7, #3]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d157      	bne.n	80002d6 <DRV_GPIO_Pclkcontrol+0xc2>
    {
        if(pGPIOx == GPIOA) GPIOA_PCLK_EN();
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a59      	ldr	r2, [pc, #356]	; (8000390 <DRV_GPIO_Pclkcontrol+0x17c>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <DRV_GPIO_Pclkcontrol+0x28>
 800022e:	4b59      	ldr	r3, [pc, #356]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a58      	ldr	r2, [pc, #352]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 8000234:	f043 0301 	orr.w	r3, r3, #1
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
        else if(pGPIOx == GPIOF) GPIOF_PCLK_DI();
        else if(pGPIOx == GPIOG) GPIOG_PCLK_DI();
        else if(pGPIOx == GPIOH) GPIOH_PCLK_DI();
    }
    
}
 800023a:	e0a3      	b.n	8000384 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOB) GPIOB_PCLK_EN();
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a56      	ldr	r2, [pc, #344]	; (8000398 <DRV_GPIO_Pclkcontrol+0x184>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <DRV_GPIO_Pclkcontrol+0x3e>
 8000244:	4b53      	ldr	r3, [pc, #332]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a52      	ldr	r2, [pc, #328]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 800024a:	f043 0302 	orr.w	r3, r3, #2
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e098      	b.n	8000384 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOC) GPIOC_PCLK_EN();
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a51      	ldr	r2, [pc, #324]	; (800039c <DRV_GPIO_Pclkcontrol+0x188>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <DRV_GPIO_Pclkcontrol+0x54>
 800025a:	4b4e      	ldr	r3, [pc, #312]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a4d      	ldr	r2, [pc, #308]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 8000260:	f043 0304 	orr.w	r3, r3, #4
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e08d      	b.n	8000384 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOD) GPIOD_PCLK_EN();
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a4d      	ldr	r2, [pc, #308]	; (80003a0 <DRV_GPIO_Pclkcontrol+0x18c>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <DRV_GPIO_Pclkcontrol+0x6a>
 8000270:	4b48      	ldr	r3, [pc, #288]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a47      	ldr	r2, [pc, #284]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 8000276:	f043 0308 	orr.w	r3, r3, #8
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e082      	b.n	8000384 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOE) GPIOE_PCLK_EN();
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a48      	ldr	r2, [pc, #288]	; (80003a4 <DRV_GPIO_Pclkcontrol+0x190>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <DRV_GPIO_Pclkcontrol+0x80>
 8000286:	4b43      	ldr	r3, [pc, #268]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a42      	ldr	r2, [pc, #264]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 800028c:	f043 0310 	orr.w	r3, r3, #16
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e077      	b.n	8000384 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOF) GPIOF_PCLK_EN();
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a44      	ldr	r2, [pc, #272]	; (80003a8 <DRV_GPIO_Pclkcontrol+0x194>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <DRV_GPIO_Pclkcontrol+0x96>
 800029c:	4b3d      	ldr	r3, [pc, #244]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a3c      	ldr	r2, [pc, #240]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 80002a2:	f043 0320 	orr.w	r3, r3, #32
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e06c      	b.n	8000384 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOG) GPIOG_PCLK_EN();
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a3f      	ldr	r2, [pc, #252]	; (80003ac <DRV_GPIO_Pclkcontrol+0x198>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d106      	bne.n	80002c0 <DRV_GPIO_Pclkcontrol+0xac>
 80002b2:	4b38      	ldr	r3, [pc, #224]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a37      	ldr	r2, [pc, #220]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 80002b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e061      	b.n	8000384 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOH) GPIOH_PCLK_EN();
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a3b      	ldr	r2, [pc, #236]	; (80003b0 <DRV_GPIO_Pclkcontrol+0x19c>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d15d      	bne.n	8000384 <DRV_GPIO_Pclkcontrol+0x170>
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a31      	ldr	r2, [pc, #196]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 80002ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e056      	b.n	8000384 <DRV_GPIO_Pclkcontrol+0x170>
        if(pGPIOx == GPIOA) GPIOA_PCLK_DI();
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a2d      	ldr	r2, [pc, #180]	; (8000390 <DRV_GPIO_Pclkcontrol+0x17c>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <DRV_GPIO_Pclkcontrol+0xd8>
 80002de:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 80002e4:	f023 0301 	bic.w	r3, r3, #1
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e04b      	b.n	8000384 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOB) GPIOB_PCLK_DI();
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a2a      	ldr	r2, [pc, #168]	; (8000398 <DRV_GPIO_Pclkcontrol+0x184>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <DRV_GPIO_Pclkcontrol+0xee>
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a26      	ldr	r2, [pc, #152]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 80002fa:	f023 0302 	bic.w	r3, r3, #2
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e040      	b.n	8000384 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOC) GPIOC_PCLK_DI();
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a25      	ldr	r2, [pc, #148]	; (800039c <DRV_GPIO_Pclkcontrol+0x188>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <DRV_GPIO_Pclkcontrol+0x104>
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a21      	ldr	r2, [pc, #132]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 8000310:	f023 0304 	bic.w	r3, r3, #4
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e035      	b.n	8000384 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOD) GPIOD_PCLK_DI();
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a21      	ldr	r2, [pc, #132]	; (80003a0 <DRV_GPIO_Pclkcontrol+0x18c>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <DRV_GPIO_Pclkcontrol+0x11a>
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a1b      	ldr	r2, [pc, #108]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 8000326:	f023 0308 	bic.w	r3, r3, #8
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e02a      	b.n	8000384 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOE) GPIOE_PCLK_DI();
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a1c      	ldr	r2, [pc, #112]	; (80003a4 <DRV_GPIO_Pclkcontrol+0x190>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <DRV_GPIO_Pclkcontrol+0x130>
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a16      	ldr	r2, [pc, #88]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 800033c:	f023 0310 	bic.w	r3, r3, #16
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e01f      	b.n	8000384 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOF) GPIOF_PCLK_DI();
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <DRV_GPIO_Pclkcontrol+0x194>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <DRV_GPIO_Pclkcontrol+0x146>
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 8000352:	f023 0320 	bic.w	r3, r3, #32
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e014      	b.n	8000384 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOG) GPIOG_PCLK_DI();
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a13      	ldr	r2, [pc, #76]	; (80003ac <DRV_GPIO_Pclkcontrol+0x198>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <DRV_GPIO_Pclkcontrol+0x15c>
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 8000368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e009      	b.n	8000384 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOH) GPIOH_PCLK_DI();
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a0f      	ldr	r2, [pc, #60]	; (80003b0 <DRV_GPIO_Pclkcontrol+0x19c>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d105      	bne.n	8000384 <DRV_GPIO_Pclkcontrol+0x170>
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <DRV_GPIO_Pclkcontrol+0x180>)
 800037e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	40020000 	.word	0x40020000
 8000394:	40023800 	.word	0x40023800
 8000398:	40020400 	.word	0x40020400
 800039c:	40020800 	.word	0x40020800
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40021400 	.word	0x40021400
 80003ac:	40021800 	.word	0x40021800
 80003b0:	40021c00 	.word	0x40021c00

080003b4 <DRV_GPIO_Init>:
 * @param                  - pGPIOConfig: Pin configuration variable
 * 
 * @return                 - void
********************************************************/
void DRV_GPIO_Init(GPIO_TypeDef_t* pGPIOx, GPIO_PinConfig_t* pGPIOPinCofig)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	6039      	str	r1, [r7, #0]
    uint32_t temp; 

    // Enable peripheral clock 
    DRV_GPIO_Pclkcontrol(pGPIOx, ENABLE);
 80003be:	2101      	movs	r1, #1
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f7ff ff27 	bl	8000214 <DRV_GPIO_Pclkcontrol>
    // 1. Configure mode 
    if(pGPIOPinCofig->PinMode <= GPIO_ANALOG)
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	785b      	ldrb	r3, [r3, #1]
 80003ca:	2b03      	cmp	r3, #3
 80003cc:	d81a      	bhi.n	8000404 <DRV_GPIO_Init+0x50>
    {
        temp = (pGPIOPinCofig->PinMode << (2*pGPIOPinCofig->PinNumber));
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	785b      	ldrb	r3, [r3, #1]
 80003d2:	461a      	mov	r2, r3
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	fa02 f303 	lsl.w	r3, r2, r3
 80003de:	613b      	str	r3, [r7, #16]
        pGPIOx->MODER &= ~(0x03 << pGPIOPinCofig->PinNumber); // clear bit 
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	683a      	ldr	r2, [r7, #0]
 80003e6:	7812      	ldrb	r2, [r2, #0]
 80003e8:	4611      	mov	r1, r2
 80003ea:	2203      	movs	r2, #3
 80003ec:	408a      	lsls	r2, r1
 80003ee:	43d2      	mvns	r2, r2
 80003f0:	401a      	ands	r2, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	601a      	str	r2, [r3, #0]
        pGPIOx->MODER |= temp; // set bit 
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	431a      	orrs	r2, r3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	e0a7      	b.n	8000554 <DRV_GPIO_Init+0x1a0>
    }
    else
    {
        /* interrupts */
        if(pGPIOPinCofig->PinMode == GPIO_IT_FALLING)
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	785b      	ldrb	r3, [r3, #1]
 8000408:	2b04      	cmp	r3, #4
 800040a:	d117      	bne.n	800043c <DRV_GPIO_Init+0x88>
        {
            /* 1. Configure FTSR ( Falling Trigger Select Register) */
            EXTI->FTSR |= (1<< pGPIOPinCofig->PinNumber);// set FTSR bit
 800040c:	4b97      	ldr	r3, [pc, #604]	; (800066c <DRV_GPIO_Init+0x2b8>)
 800040e:	68db      	ldr	r3, [r3, #12]
 8000410:	683a      	ldr	r2, [r7, #0]
 8000412:	7812      	ldrb	r2, [r2, #0]
 8000414:	4611      	mov	r1, r2
 8000416:	2201      	movs	r2, #1
 8000418:	408a      	lsls	r2, r1
 800041a:	4611      	mov	r1, r2
 800041c:	4a93      	ldr	r2, [pc, #588]	; (800066c <DRV_GPIO_Init+0x2b8>)
 800041e:	430b      	orrs	r3, r1
 8000420:	60d3      	str	r3, [r2, #12]
            EXTI->RTSR &= ~(1<< pGPIOPinCofig->PinNumber);// clear RTSR bit
 8000422:	4b92      	ldr	r3, [pc, #584]	; (800066c <DRV_GPIO_Init+0x2b8>)
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	683a      	ldr	r2, [r7, #0]
 8000428:	7812      	ldrb	r2, [r2, #0]
 800042a:	4611      	mov	r1, r2
 800042c:	2201      	movs	r2, #1
 800042e:	408a      	lsls	r2, r1
 8000430:	43d2      	mvns	r2, r2
 8000432:	4611      	mov	r1, r2
 8000434:	4a8d      	ldr	r2, [pc, #564]	; (800066c <DRV_GPIO_Init+0x2b8>)
 8000436:	400b      	ands	r3, r1
 8000438:	6093      	str	r3, [r2, #8]
 800043a:	e035      	b.n	80004a8 <DRV_GPIO_Init+0xf4>
        }
        else if(pGPIOPinCofig->PinMode == GPIO_IT_RISING)
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	785b      	ldrb	r3, [r3, #1]
 8000440:	2b05      	cmp	r3, #5
 8000442:	d117      	bne.n	8000474 <DRV_GPIO_Init+0xc0>
        {
            /* 1. Configure RTSR ( Falling Trigger Select Register) */
            EXTI->RTSR |= (1<< pGPIOPinCofig->PinNumber); // set RTSR bit
 8000444:	4b89      	ldr	r3, [pc, #548]	; (800066c <DRV_GPIO_Init+0x2b8>)
 8000446:	689b      	ldr	r3, [r3, #8]
 8000448:	683a      	ldr	r2, [r7, #0]
 800044a:	7812      	ldrb	r2, [r2, #0]
 800044c:	4611      	mov	r1, r2
 800044e:	2201      	movs	r2, #1
 8000450:	408a      	lsls	r2, r1
 8000452:	4611      	mov	r1, r2
 8000454:	4a85      	ldr	r2, [pc, #532]	; (800066c <DRV_GPIO_Init+0x2b8>)
 8000456:	430b      	orrs	r3, r1
 8000458:	6093      	str	r3, [r2, #8]
            EXTI->FTSR &= ~(1<< pGPIOPinCofig->PinNumber);// clear FTSR bit
 800045a:	4b84      	ldr	r3, [pc, #528]	; (800066c <DRV_GPIO_Init+0x2b8>)
 800045c:	68db      	ldr	r3, [r3, #12]
 800045e:	683a      	ldr	r2, [r7, #0]
 8000460:	7812      	ldrb	r2, [r2, #0]
 8000462:	4611      	mov	r1, r2
 8000464:	2201      	movs	r2, #1
 8000466:	408a      	lsls	r2, r1
 8000468:	43d2      	mvns	r2, r2
 800046a:	4611      	mov	r1, r2
 800046c:	4a7f      	ldr	r2, [pc, #508]	; (800066c <DRV_GPIO_Init+0x2b8>)
 800046e:	400b      	ands	r3, r1
 8000470:	60d3      	str	r3, [r2, #12]
 8000472:	e019      	b.n	80004a8 <DRV_GPIO_Init+0xf4>
        }
        else if (pGPIOPinCofig->PinMode == GPIO_IT_FALLING_RISING)
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	785b      	ldrb	r3, [r3, #1]
 8000478:	2b06      	cmp	r3, #6
 800047a:	d115      	bne.n	80004a8 <DRV_GPIO_Init+0xf4>
        {
            /* 1. Configure both register */
            EXTI->RTSR |= (1<< pGPIOPinCofig->PinNumber);// set RTSR bit
 800047c:	4b7b      	ldr	r3, [pc, #492]	; (800066c <DRV_GPIO_Init+0x2b8>)
 800047e:	689b      	ldr	r3, [r3, #8]
 8000480:	683a      	ldr	r2, [r7, #0]
 8000482:	7812      	ldrb	r2, [r2, #0]
 8000484:	4611      	mov	r1, r2
 8000486:	2201      	movs	r2, #1
 8000488:	408a      	lsls	r2, r1
 800048a:	4611      	mov	r1, r2
 800048c:	4a77      	ldr	r2, [pc, #476]	; (800066c <DRV_GPIO_Init+0x2b8>)
 800048e:	430b      	orrs	r3, r1
 8000490:	6093      	str	r3, [r2, #8]
            EXTI->FTSR |= (1<< pGPIOPinCofig->PinNumber);// set FTSR bit            
 8000492:	4b76      	ldr	r3, [pc, #472]	; (800066c <DRV_GPIO_Init+0x2b8>)
 8000494:	68db      	ldr	r3, [r3, #12]
 8000496:	683a      	ldr	r2, [r7, #0]
 8000498:	7812      	ldrb	r2, [r2, #0]
 800049a:	4611      	mov	r1, r2
 800049c:	2201      	movs	r2, #1
 800049e:	408a      	lsls	r2, r1
 80004a0:	4611      	mov	r1, r2
 80004a2:	4a72      	ldr	r2, [pc, #456]	; (800066c <DRV_GPIO_Init+0x2b8>)
 80004a4:	430b      	orrs	r3, r1
 80004a6:	60d3      	str	r3, [r2, #12]
        }

        // 2. Configure the GPIO port selection in SYSCFG_EXTIR
        uint8_t temp1 = pGPIOPinCofig->PinNumber/4;
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	089b      	lsrs	r3, r3, #2
 80004ae:	75fb      	strb	r3, [r7, #23]
        uint8_t temp2 = pGPIOPinCofig->PinNumber%4;
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	f003 0303 	and.w	r3, r3, #3
 80004b8:	75bb      	strb	r3, [r7, #22]
        uint8_t portcode = GPIO_BASE_TO_CODE(pGPIOx);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a6c      	ldr	r2, [pc, #432]	; (8000670 <DRV_GPIO_Init+0x2bc>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d02b      	beq.n	800051a <DRV_GPIO_Init+0x166>
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4a6b      	ldr	r2, [pc, #428]	; (8000674 <DRV_GPIO_Init+0x2c0>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d025      	beq.n	8000516 <DRV_GPIO_Init+0x162>
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a6a      	ldr	r2, [pc, #424]	; (8000678 <DRV_GPIO_Init+0x2c4>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d01f      	beq.n	8000512 <DRV_GPIO_Init+0x15e>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a69      	ldr	r2, [pc, #420]	; (800067c <DRV_GPIO_Init+0x2c8>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d019      	beq.n	800050e <DRV_GPIO_Init+0x15a>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4a68      	ldr	r2, [pc, #416]	; (8000680 <DRV_GPIO_Init+0x2cc>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d013      	beq.n	800050a <DRV_GPIO_Init+0x156>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a67      	ldr	r2, [pc, #412]	; (8000684 <DRV_GPIO_Init+0x2d0>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d00d      	beq.n	8000506 <DRV_GPIO_Init+0x152>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a66      	ldr	r2, [pc, #408]	; (8000688 <DRV_GPIO_Init+0x2d4>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d007      	beq.n	8000502 <DRV_GPIO_Init+0x14e>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a65      	ldr	r2, [pc, #404]	; (800068c <DRV_GPIO_Init+0x2d8>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d101      	bne.n	80004fe <DRV_GPIO_Init+0x14a>
 80004fa:	2307      	movs	r3, #7
 80004fc:	e00e      	b.n	800051c <DRV_GPIO_Init+0x168>
 80004fe:	2300      	movs	r3, #0
 8000500:	e00c      	b.n	800051c <DRV_GPIO_Init+0x168>
 8000502:	2306      	movs	r3, #6
 8000504:	e00a      	b.n	800051c <DRV_GPIO_Init+0x168>
 8000506:	2305      	movs	r3, #5
 8000508:	e008      	b.n	800051c <DRV_GPIO_Init+0x168>
 800050a:	2304      	movs	r3, #4
 800050c:	e006      	b.n	800051c <DRV_GPIO_Init+0x168>
 800050e:	2303      	movs	r3, #3
 8000510:	e004      	b.n	800051c <DRV_GPIO_Init+0x168>
 8000512:	2302      	movs	r3, #2
 8000514:	e002      	b.n	800051c <DRV_GPIO_Init+0x168>
 8000516:	2301      	movs	r3, #1
 8000518:	e000      	b.n	800051c <DRV_GPIO_Init+0x168>
 800051a:	2300      	movs	r3, #0
 800051c:	757b      	strb	r3, [r7, #21]
        SYSCFG_PCLK_EN();
 800051e:	4b5c      	ldr	r3, [pc, #368]	; (8000690 <DRV_GPIO_Init+0x2dc>)
 8000520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000522:	4a5b      	ldr	r2, [pc, #364]	; (8000690 <DRV_GPIO_Init+0x2dc>)
 8000524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000528:	6453      	str	r3, [r2, #68]	; 0x44
        SYSCFG->EXTICR[temp1] = portcode << (4*temp2);
 800052a:	7d7a      	ldrb	r2, [r7, #21]
 800052c:	7dbb      	ldrb	r3, [r7, #22]
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	fa02 f103 	lsl.w	r1, r2, r3
 8000534:	4a57      	ldr	r2, [pc, #348]	; (8000694 <DRV_GPIO_Init+0x2e0>)
 8000536:	7dfb      	ldrb	r3, [r7, #23]
 8000538:	3302      	adds	r3, #2
 800053a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        // 3. Enable EXTI deliver using IMR
        EXTI->IMR |= (1<< pGPIOPinCofig->PinNumber);
 800053e:	4b4b      	ldr	r3, [pc, #300]	; (800066c <DRV_GPIO_Init+0x2b8>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	683a      	ldr	r2, [r7, #0]
 8000544:	7812      	ldrb	r2, [r2, #0]
 8000546:	4611      	mov	r1, r2
 8000548:	2201      	movs	r2, #1
 800054a:	408a      	lsls	r2, r1
 800054c:	4611      	mov	r1, r2
 800054e:	4a47      	ldr	r2, [pc, #284]	; (800066c <DRV_GPIO_Init+0x2b8>)
 8000550:	430b      	orrs	r3, r1
 8000552:	6013      	str	r3, [r2, #0]
        

    }
    temp = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	613b      	str	r3, [r7, #16]

    // 2. Configure speed
    temp = (pGPIOPinCofig->PinSpeed << (2*pGPIOPinCofig->PinNumber));
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	789b      	ldrb	r3, [r3, #2]
 800055c:	461a      	mov	r2, r3
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	fa02 f303 	lsl.w	r3, r2, r3
 8000568:	613b      	str	r3, [r7, #16]
    pGPIOx->OSPEEDER &= ~(0x03 << pGPIOPinCofig->PinNumber); // clear bit 
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	7812      	ldrb	r2, [r2, #0]
 8000572:	4611      	mov	r1, r2
 8000574:	2203      	movs	r2, #3
 8000576:	408a      	lsls	r2, r1
 8000578:	43d2      	mvns	r2, r2
 800057a:	401a      	ands	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	609a      	str	r2, [r3, #8]
    pGPIOx->OSPEEDER |= temp; // set bit 
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689a      	ldr	r2, [r3, #8]
 8000584:	693b      	ldr	r3, [r7, #16]
 8000586:	431a      	orrs	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	609a      	str	r2, [r3, #8]
    temp = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	613b      	str	r3, [r7, #16]

    // 3. Configure pull up pull down configuration
    temp = (pGPIOPinCofig->PinPUPDCtrl << (2*pGPIOPinCofig->PinNumber));
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	78db      	ldrb	r3, [r3, #3]
 8000594:	461a      	mov	r2, r3
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	fa02 f303 	lsl.w	r3, r2, r3
 80005a0:	613b      	str	r3, [r7, #16]
    pGPIOx->PUPDR &= ~(0x03 << pGPIOPinCofig->PinNumber); // clear bit 
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	68db      	ldr	r3, [r3, #12]
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	7812      	ldrb	r2, [r2, #0]
 80005aa:	4611      	mov	r1, r2
 80005ac:	2203      	movs	r2, #3
 80005ae:	408a      	lsls	r2, r1
 80005b0:	43d2      	mvns	r2, r2
 80005b2:	401a      	ands	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	60da      	str	r2, [r3, #12]
    pGPIOx->PUPDR |= temp; //set bit 
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	68da      	ldr	r2, [r3, #12]
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	431a      	orrs	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	60da      	str	r2, [r3, #12]
    temp = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]

    // 4. Configure output type 
    temp = (pGPIOPinCofig->PinOPType << pGPIOPinCofig->PinNumber);
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	791b      	ldrb	r3, [r3, #4]
 80005cc:	461a      	mov	r2, r3
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	613b      	str	r3, [r7, #16]
    pGPIOx->OTYPER &= ~(0x01 << pGPIOPinCofig->PinNumber); // clear bit 
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	7812      	ldrb	r2, [r2, #0]
 80005e0:	4611      	mov	r1, r2
 80005e2:	2201      	movs	r2, #1
 80005e4:	408a      	lsls	r2, r1
 80005e6:	43d2      	mvns	r2, r2
 80005e8:	401a      	ands	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	605a      	str	r2, [r3, #4]
    pGPIOx->OTYPER |= temp; //set bit
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	685a      	ldr	r2, [r3, #4]
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	431a      	orrs	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	605a      	str	r2, [r3, #4]
    temp = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]

    // 5. Configure alternative function
    if(pGPIOPinCofig->PinMode == GPIO_ALTERNATE)
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	785b      	ldrb	r3, [r3, #1]
 8000602:	2b02      	cmp	r3, #2
 8000604:	d12e      	bne.n	8000664 <DRV_GPIO_Init+0x2b0>
    {
        uint32_t temp1, temp2;
        temp1 = pGPIOPinCofig->PinNumber/8;
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	08db      	lsrs	r3, r3, #3
 800060c:	b2db      	uxtb	r3, r3
 800060e:	60fb      	str	r3, [r7, #12]
        temp2 = pGPIOPinCofig->PinNumber%8;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f003 0307 	and.w	r3, r3, #7
 8000618:	60bb      	str	r3, [r7, #8]
        pGPIOx->AFR[temp1] &= ~(0xFF << (4*temp2));
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	68fa      	ldr	r2, [r7, #12]
 800061e:	3208      	adds	r2, #8
 8000620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000624:	68ba      	ldr	r2, [r7, #8]
 8000626:	0092      	lsls	r2, r2, #2
 8000628:	21ff      	movs	r1, #255	; 0xff
 800062a:	fa01 f202 	lsl.w	r2, r1, r2
 800062e:	43d2      	mvns	r2, r2
 8000630:	ea03 0102 	and.w	r1, r3, r2
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	3208      	adds	r2, #8
 800063a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOx->AFR[temp1] |= (pGPIOPinCofig->PinAltFunction << (4*temp2));
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	68fa      	ldr	r2, [r7, #12]
 8000642:	3208      	adds	r2, #8
 8000644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000648:	683a      	ldr	r2, [r7, #0]
 800064a:	7952      	ldrb	r2, [r2, #5]
 800064c:	4611      	mov	r1, r2
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	0092      	lsls	r2, r2, #2
 8000652:	fa01 f202 	lsl.w	r2, r1, r2
 8000656:	ea43 0102 	orr.w	r1, r3, r2
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	3208      	adds	r2, #8
 8000660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

}
 8000664:	bf00      	nop
 8000666:	3718      	adds	r7, #24
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40013c00 	.word	0x40013c00
 8000670:	40020000 	.word	0x40020000
 8000674:	40020400 	.word	0x40020400
 8000678:	40020800 	.word	0x40020800
 800067c:	40020c00 	.word	0x40020c00
 8000680:	40021000 	.word	0x40021000
 8000684:	40021400 	.word	0x40021400
 8000688:	40021800 	.word	0x40021800
 800068c:	40021c00 	.word	0x40021c00
 8000690:	40023800 	.word	0x40023800
 8000694:	40013800 	.word	0x40013800

08000698 <DRV_SPI_Pclkcontrol>:
 * @param                  - EnOrDi: Enable or Disable 
 * 
 * @return                 - void
********************************************************/
void DRV_SPI_Pclkcontrol(SPI_TypeDef_t* pSPIx, EnOrDi_State EnOrDi)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi == ENABLE)
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d12b      	bne.n	8000702 <DRV_SPI_Pclkcontrol+0x6a>
    {
        if(pSPIx == SPI1)       SPI1_PCLK_EN();
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a2d      	ldr	r2, [pc, #180]	; (8000764 <DRV_SPI_Pclkcontrol+0xcc>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d106      	bne.n	80006c0 <DRV_SPI_Pclkcontrol+0x28>
 80006b2:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <DRV_SPI_Pclkcontrol+0xd0>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a2c      	ldr	r2, [pc, #176]	; (8000768 <DRV_SPI_Pclkcontrol+0xd0>)
 80006b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
        else if(pSPIx == SPI2)  SPI2_PCLK_DI();
        else if(pSPIx == SPI3)  SPI3_PCLK_DI();
        else if(pSPIx == SPI4)  SPI4_PCLK_DI();
    }
    
}
 80006be:	e04b      	b.n	8000758 <DRV_SPI_Pclkcontrol+0xc0>
        else if(pSPIx == SPI2)  SPI2_PCLK_EN();
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a2a      	ldr	r2, [pc, #168]	; (800076c <DRV_SPI_Pclkcontrol+0xd4>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d106      	bne.n	80006d6 <DRV_SPI_Pclkcontrol+0x3e>
 80006c8:	4b27      	ldr	r3, [pc, #156]	; (8000768 <DRV_SPI_Pclkcontrol+0xd0>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a26      	ldr	r2, [pc, #152]	; (8000768 <DRV_SPI_Pclkcontrol+0xd0>)
 80006ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006d4:	e040      	b.n	8000758 <DRV_SPI_Pclkcontrol+0xc0>
        else if(pSPIx == SPI3)  SPI3_PCLK_EN();
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a25      	ldr	r2, [pc, #148]	; (8000770 <DRV_SPI_Pclkcontrol+0xd8>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d106      	bne.n	80006ec <DRV_SPI_Pclkcontrol+0x54>
 80006de:	4b22      	ldr	r3, [pc, #136]	; (8000768 <DRV_SPI_Pclkcontrol+0xd0>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	4a21      	ldr	r2, [pc, #132]	; (8000768 <DRV_SPI_Pclkcontrol+0xd0>)
 80006e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006e8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006ea:	e035      	b.n	8000758 <DRV_SPI_Pclkcontrol+0xc0>
        else if(pSPIx == SPI4)  SPI4_PCLK_EN();
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a21      	ldr	r2, [pc, #132]	; (8000774 <DRV_SPI_Pclkcontrol+0xdc>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d131      	bne.n	8000758 <DRV_SPI_Pclkcontrol+0xc0>
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <DRV_SPI_Pclkcontrol+0xd0>)
 80006f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f8:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <DRV_SPI_Pclkcontrol+0xd0>)
 80006fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006fe:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000700:	e02a      	b.n	8000758 <DRV_SPI_Pclkcontrol+0xc0>
        if(pSPIx == SPI1)       SPI1_PCLK_DI();
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a17      	ldr	r2, [pc, #92]	; (8000764 <DRV_SPI_Pclkcontrol+0xcc>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d106      	bne.n	8000718 <DRV_SPI_Pclkcontrol+0x80>
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <DRV_SPI_Pclkcontrol+0xd0>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	4a16      	ldr	r2, [pc, #88]	; (8000768 <DRV_SPI_Pclkcontrol+0xd0>)
 8000710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000714:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000716:	e01f      	b.n	8000758 <DRV_SPI_Pclkcontrol+0xc0>
        else if(pSPIx == SPI2)  SPI2_PCLK_DI();
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a14      	ldr	r2, [pc, #80]	; (800076c <DRV_SPI_Pclkcontrol+0xd4>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d106      	bne.n	800072e <DRV_SPI_Pclkcontrol+0x96>
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <DRV_SPI_Pclkcontrol+0xd0>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	4a10      	ldr	r2, [pc, #64]	; (8000768 <DRV_SPI_Pclkcontrol+0xd0>)
 8000726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800072a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800072c:	e014      	b.n	8000758 <DRV_SPI_Pclkcontrol+0xc0>
        else if(pSPIx == SPI3)  SPI3_PCLK_DI();
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a0f      	ldr	r2, [pc, #60]	; (8000770 <DRV_SPI_Pclkcontrol+0xd8>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d106      	bne.n	8000744 <DRV_SPI_Pclkcontrol+0xac>
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <DRV_SPI_Pclkcontrol+0xd0>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	4a0b      	ldr	r2, [pc, #44]	; (8000768 <DRV_SPI_Pclkcontrol+0xd0>)
 800073c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000740:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000742:	e009      	b.n	8000758 <DRV_SPI_Pclkcontrol+0xc0>
        else if(pSPIx == SPI4)  SPI4_PCLK_DI();
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <DRV_SPI_Pclkcontrol+0xdc>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d105      	bne.n	8000758 <DRV_SPI_Pclkcontrol+0xc0>
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <DRV_SPI_Pclkcontrol+0xd0>)
 800074e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000750:	4a05      	ldr	r2, [pc, #20]	; (8000768 <DRV_SPI_Pclkcontrol+0xd0>)
 8000752:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000756:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40013000 	.word	0x40013000
 8000768:	40023800 	.word	0x40023800
 800076c:	40003800 	.word	0x40003800
 8000770:	40003c00 	.word	0x40003c00
 8000774:	40013400 	.word	0x40013400

08000778 <DRV_SPI_Init>:
 * @param                  - pGPIOConfig: Pin configuration variable
 * 
 * @return                 - void
********************************************************/
void DRV_SPI_Init(SPI_TypeDef_t* pSPIx, SPI_Config_t* hspix)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
    // Configure CR1 register 
    uint32_t tempreg = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
    tempreg &= ~pSPIx->CR1;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	43db      	mvns	r3, r3
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	4013      	ands	r3, r2
 8000790:	60fb      	str	r3, [r7, #12]
    
    // Enable peripheral clock 
    DRV_SPI_Pclkcontrol(pSPIx, ENABLE);
 8000792:	2101      	movs	r1, #1
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff7f 	bl	8000698 <DRV_SPI_Pclkcontrol>

    // 1. Configure device mode
    tempreg |= (hspix->SPI_DeviceMode << 2);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	461a      	mov	r2, r3
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	60fb      	str	r3, [r7, #12]
    
    // 2. Bus configure 
    if(hspix->SPI_BusConfig == FullDuplex)
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	785b      	ldrb	r3, [r3, #1]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d104      	bne.n	80007ba <DRV_SPI_Init+0x42>
    {
        // BIDI should be cleared
        tempreg &=~ (1<<15);
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	e014      	b.n	80007e4 <DRV_SPI_Init+0x6c>
    }
    else if(hspix->SPI_BusConfig == HalfDuplex)
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	785b      	ldrb	r3, [r3, #1]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d104      	bne.n	80007cc <DRV_SPI_Init+0x54>
    {
        // BIDI should be Set
        tempreg |= (1<<15);
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	e00b      	b.n	80007e4 <DRV_SPI_Init+0x6c>
    }
    
    else if(hspix->SPI_BusConfig == Simplex_Rx)
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	785b      	ldrb	r3, [r3, #1]
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d107      	bne.n	80007e4 <DRV_SPI_Init+0x6c>
    {
        // BIDI should be cleared and RXONLY bit must be set
        tempreg &=~ (1<<15);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007da:	60fb      	str	r3, [r7, #12]
        tempreg |=  (1<<10);
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007e2:	60fb      	str	r3, [r7, #12]
    }

    // 3. Configure SPI serial clock peripheral speed
    tempreg |= (hspix->SPI_SClkSpeed << 3);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	789b      	ldrb	r3, [r3, #2]
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	461a      	mov	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	60fb      	str	r3, [r7, #12]

    // 4. Configure SPI Data frame format
    tempreg |= (hspix->SPI_DFF << 11);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	78db      	ldrb	r3, [r3, #3]
 80007f6:	02db      	lsls	r3, r3, #11
 80007f8:	461a      	mov	r2, r3
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	60fb      	str	r3, [r7, #12]

    // 5. Configure SPI polarity clock 
    tempreg |= (hspix->SPI_CPOL << 1);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	791b      	ldrb	r3, [r3, #4]
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	461a      	mov	r2, r3
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4313      	orrs	r3, r2
 800080c:	60fb      	str	r3, [r7, #12]

    // 6. Configure SPI phase clock 
    tempreg |= (hspix->SPI_CPHA << 0);  
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	795b      	ldrb	r3, [r3, #5]
 8000812:	461a      	mov	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	4313      	orrs	r3, r2
 8000818:	60fb      	str	r3, [r7, #12]

    // 7. Configure SPI phase clock
    tempreg |= (hspix->SPI_SSM << 9);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	799b      	ldrb	r3, [r3, #6]
 800081e:	025b      	lsls	r3, r3, #9
 8000820:	461a      	mov	r2, r3
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	4313      	orrs	r3, r2
 8000826:	60fb      	str	r3, [r7, #12]

    pSPIx->CR1 = tempreg;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	601a      	str	r2, [r3, #0]
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <DRV_SPI_PeripheralEnable>:

void DRV_SPI_PeripheralEnable(SPI_TypeDef_t* pSPIx, EnOrDi_State EnOrDi)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	460b      	mov	r3, r1
 8000840:	70fb      	strb	r3, [r7, #3]
    if(EnOrDi == ENABLE)
 8000842:	78fb      	ldrb	r3, [r7, #3]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d106      	bne.n	8000856 <DRV_SPI_PeripheralEnable+0x20>
    {
        pSPIx->CR1 |= (1 << 6);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	601a      	str	r2, [r3, #0]
    }
    else 
    {
        pSPIx->CR1 &=~ (1 << 6);
    }
}
 8000854:	e005      	b.n	8000862 <DRV_SPI_PeripheralEnable+0x2c>
        pSPIx->CR1 &=~ (1 << 6);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	601a      	str	r2, [r3, #0]
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <DRV_SPI_SSI>:
 * @param                  - EnOrDi: Enable or Disable
 * 
 * @return                 - void
********************************************************/
void DRV_SPI_SSI(SPI_TypeDef_t* pSPIx, EnOrDi_State EnOrDi)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	460b      	mov	r3, r1
 8000878:	70fb      	strb	r3, [r7, #3]
    if(EnOrDi == ENABLE)
 800087a:	78fb      	ldrb	r3, [r7, #3]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d106      	bne.n	800088e <DRV_SPI_SSI+0x20>
    {
        pSPIx->CR1 |= (1 << 8);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	601a      	str	r2, [r3, #0]
    }
    else 
    {
        pSPIx->CR1 &=~ (1 << 8);
    }
}
 800088c:	e005      	b.n	800089a <DRV_SPI_SSI+0x2c>
        pSPIx->CR1 &=~ (1 << 8);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	601a      	str	r2, [r3, #0]
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <SPI_FlagStatus>:
 * @param                  - FLag: Flag name
 * 
 * @return                 - void
********************************************************/
uint8_t SPI_FlagStatus(SPI_TypeDef_t* hspix, uint32_t Flag)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
 80008ae:	6039      	str	r1, [r7, #0]
    if(hspix->SR & Flag)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	689a      	ldr	r2, [r3, #8]
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	4013      	ands	r3, r2
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SPI_FlagStatus+0x1a>
    {
        return FLAG_SET;
 80008bc:	2301      	movs	r3, #1
 80008be:	e000      	b.n	80008c2 <SPI_FlagStatus+0x1c>
    }
    return FLAG_RESET;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <DRV_SPI_Transmit>:
 * 
 * @return                 - void
 * @note                   - This function is in blocking mode
********************************************************/
void DRV_SPI_Transmit(SPI_TypeDef_t* hspix, uint8_t* pTx_Buffer, uint32_t Buffer_Size)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b084      	sub	sp, #16
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	60f8      	str	r0, [r7, #12]
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
    while(Buffer_Size > 0)
 80008da:	e027      	b.n	800092c <DRV_SPI_Transmit+0x5e>
    {
        // 1. Wait TXE is set
        while(SPI_FlagStatus(hspix, SPI_TXE_FLAG) == FLAG_RESET);
 80008dc:	bf00      	nop
 80008de:	2102      	movs	r1, #2
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f7ff ffe0 	bl	80008a6 <SPI_FlagStatus>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d0f8      	beq.n	80008de <DRV_SPI_Transmit+0x10>

        // 2. Check DFF bit in CR1 
        if(hspix->CR1 & (1 << 11))
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d00e      	beq.n	8000916 <DRV_SPI_Transmit+0x48>
        {
            // 16 bits DFF 
            // 1.1 Load data to DR register 
            hspix->DR = *((uint16_t*) pTx_Buffer);
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	60da      	str	r2, [r3, #12]
            (uint16_t*) pTx_Buffer++;
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	3301      	adds	r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
            Buffer_Size--;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	607b      	str	r3, [r7, #4]
            Buffer_Size--;       
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3b01      	subs	r3, #1
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	e00a      	b.n	800092c <DRV_SPI_Transmit+0x5e>
        }
        else 
        {
            // 8 bits DFF
            // 1.1 Load data to DR register 
            hspix->DR = *pTx_Buffer;
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	60da      	str	r2, [r3, #12]
            Buffer_Size--;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	607b      	str	r3, [r7, #4]
            pTx_Buffer++;
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	3301      	adds	r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
    while(Buffer_Size > 0)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1d4      	bne.n	80008dc <DRV_SPI_Transmit+0xe>
        }
    }
}
 8000932:	bf00      	nop
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <delay>:
 */

void GPIO_INIT(void);
void SPI_INIT(void);
void delay(uint32_t timeout)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
    for(uint32_t i = 0; i < (timeout*1000); i++);
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	e002      	b.n	8000950 <delay+0x14>
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	3301      	adds	r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000956:	fb02 f303 	mul.w	r3, r2, r3
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	429a      	cmp	r2, r3
 800095e:	d3f4      	bcc.n	800094a <delay+0xe>
}
 8000960:	bf00      	nop
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
	...

08000970 <main>:
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0

	char buffer[]= "Hello CGU";
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <main+0x48>)
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	ca07      	ldmia	r2, {r0, r1, r2}
 800097c:	c303      	stmia	r3!, {r0, r1}
 800097e:	801a      	strh	r2, [r3, #0]
    GPIO_INIT();
 8000980:	f000 f840 	bl	8000a04 <GPIO_INIT>
    SPI_INIT();
 8000984:	f000 f81c 	bl	80009c0 <SPI_INIT>
    DRV_SPI_SSI(SPI1, ENABLE); // Pull NSS to high
 8000988:	2101      	movs	r1, #1
 800098a:	480c      	ldr	r0, [pc, #48]	; (80009bc <main+0x4c>)
 800098c:	f7ff ff6f 	bl	800086e <DRV_SPI_SSI>
    DRV_SPI_PeripheralEnable(SPI1, ENABLE);
 8000990:	2101      	movs	r1, #1
 8000992:	480a      	ldr	r0, [pc, #40]	; (80009bc <main+0x4c>)
 8000994:	f7ff ff4f 	bl	8000836 <DRV_SPI_PeripheralEnable>
    while(1)
    {
        DRV_SPI_Transmit(SPI1,(uint8_t*) buffer, strlen(buffer));
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fc32 	bl	8000204 <strlen>
 80009a0:	4602      	mov	r2, r0
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	4619      	mov	r1, r3
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <main+0x4c>)
 80009a8:	f7ff ff91 	bl	80008ce <DRV_SPI_Transmit>
        delay(1000);
 80009ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b0:	f7ff ffc4 	bl	800093c <delay>
        DRV_SPI_Transmit(SPI1,(uint8_t*) buffer, strlen(buffer));
 80009b4:	e7f0      	b.n	8000998 <main+0x28>
 80009b6:	bf00      	nop
 80009b8:	08000b18 	.word	0x08000b18
 80009bc:	40013000 	.word	0x40013000

080009c0 <SPI_INIT>:

    }
	return 0;
}
void SPI_INIT(void)
{ 
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
	SPI_Config_t hspi1      = {0};
 80009c6:	463b      	mov	r3, r7
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	f8c3 2003 	str.w	r2, [r3, #3]
    hspi1.SPI_BusConfig     = FullDuplex;
 80009d0:	2300      	movs	r3, #0
 80009d2:	707b      	strb	r3, [r7, #1]
    hspi1.SPI_DeviceMode    = MASTER;
 80009d4:	2301      	movs	r3, #1
 80009d6:	703b      	strb	r3, [r7, #0]
    hspi1.SPI_SClkSpeed     = DIV_2; // generate 8MHz
 80009d8:	2300      	movs	r3, #0
 80009da:	70bb      	strb	r3, [r7, #2]
    hspi1.SPI_DFF           = DFF_8BITS;
 80009dc:	2300      	movs	r3, #0
 80009de:	70fb      	strb	r3, [r7, #3]
    hspi1.SPI_CPOL          = CPOL_L;
 80009e0:	2300      	movs	r3, #0
 80009e2:	713b      	strb	r3, [r7, #4]
    hspi1.SPI_CPHA          = CPHA_L;
 80009e4:	2300      	movs	r3, #0
 80009e6:	717b      	strb	r3, [r7, #5]
    hspi1.SPI_SSM           = SSM_EN; // SW management disable
 80009e8:	2301      	movs	r3, #1
 80009ea:	71bb      	strb	r3, [r7, #6]
    DRV_SPI_Init(SPI1, &hspi1);
 80009ec:	463b      	mov	r3, r7
 80009ee:	4619      	mov	r1, r3
 80009f0:	4803      	ldr	r0, [pc, #12]	; (8000a00 <SPI_INIT+0x40>)
 80009f2:	f7ff fec1 	bl	8000778 <DRV_SPI_Init>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40013000 	.word	0x40013000

08000a04 <GPIO_INIT>:

void GPIO_INIT(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
    GPIO_PinConfig_t SpiGPIO ;
    SpiGPIO.PinMode         = GPIO_ALTERNATE;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	707b      	strb	r3, [r7, #1]
    SpiGPIO.PinAltFunction  = 5;
 8000a0e:	2305      	movs	r3, #5
 8000a10:	717b      	strb	r3, [r7, #5]
    SpiGPIO.PinOPType       = PushPull;
 8000a12:	2300      	movs	r3, #0
 8000a14:	713b      	strb	r3, [r7, #4]
    SpiGPIO.PinPUPDCtrl     = NoPUPD;
 8000a16:	2300      	movs	r3, #0
 8000a18:	70fb      	strb	r3, [r7, #3]
    SpiGPIO.PinSpeed        = FAST;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	70bb      	strb	r3, [r7, #2]
    // NSS
    SpiGPIO.PinNumber = GPIO_PIN_4;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	703b      	strb	r3, [r7, #0]
    DRV_GPIO_Init(GPIOA, &SpiGPIO);
 8000a22:	463b      	mov	r3, r7
 8000a24:	4619      	mov	r1, r3
 8000a26:	480e      	ldr	r0, [pc, #56]	; (8000a60 <GPIO_INIT+0x5c>)
 8000a28:	f7ff fcc4 	bl	80003b4 <DRV_GPIO_Init>

    // SCK
    SpiGPIO.PinNumber = GPIO_PIN_5;
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	703b      	strb	r3, [r7, #0]
    DRV_GPIO_Init(GPIOA, &SpiGPIO);
 8000a30:	463b      	mov	r3, r7
 8000a32:	4619      	mov	r1, r3
 8000a34:	480a      	ldr	r0, [pc, #40]	; (8000a60 <GPIO_INIT+0x5c>)
 8000a36:	f7ff fcbd 	bl	80003b4 <DRV_GPIO_Init>

    // MISO
    SpiGPIO.PinNumber = GPIO_PIN_6;
 8000a3a:	2306      	movs	r3, #6
 8000a3c:	703b      	strb	r3, [r7, #0]
    DRV_GPIO_Init(GPIOA, &SpiGPIO);  
 8000a3e:	463b      	mov	r3, r7
 8000a40:	4619      	mov	r1, r3
 8000a42:	4807      	ldr	r0, [pc, #28]	; (8000a60 <GPIO_INIT+0x5c>)
 8000a44:	f7ff fcb6 	bl	80003b4 <DRV_GPIO_Init>

    // MOSI
    SpiGPIO.PinNumber = GPIO_PIN_7;
 8000a48:	2307      	movs	r3, #7
 8000a4a:	703b      	strb	r3, [r7, #0]
    DRV_GPIO_Init(GPIOA, &SpiGPIO);
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4803      	ldr	r0, [pc, #12]	; (8000a60 <GPIO_INIT+0x5c>)
 8000a52:	f7ff fcaf 	bl	80003b4 <DRV_GPIO_Init>

}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40020000 	.word	0x40020000

08000a64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a64:	480d      	ldr	r0, [pc, #52]	; (8000a9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a66:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a68:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6e:	490d      	ldr	r1, [pc, #52]	; (8000aa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <LoopForever+0xe>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a84:	4c0a      	ldr	r4, [pc, #40]	; (8000ab0 <LoopForever+0x16>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a92:	f000 f811 	bl	8000ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a96:	f7ff ff6b 	bl	8000970 <main>

08000a9a <LoopForever>:

LoopForever:
  b LoopForever
 8000a9a:	e7fe      	b.n	8000a9a <LoopForever>
  ldr   r0, =_estack
 8000a9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000aa8:	08000b2c 	.word	0x08000b2c
  ldr r2, =_sbss
 8000aac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ab0:	2000001c 	.word	0x2000001c

08000ab4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC_IRQHandler>
	...

08000ab8 <__libc_init_array>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	4d0d      	ldr	r5, [pc, #52]	; (8000af0 <__libc_init_array+0x38>)
 8000abc:	4c0d      	ldr	r4, [pc, #52]	; (8000af4 <__libc_init_array+0x3c>)
 8000abe:	1b64      	subs	r4, r4, r5
 8000ac0:	10a4      	asrs	r4, r4, #2
 8000ac2:	2600      	movs	r6, #0
 8000ac4:	42a6      	cmp	r6, r4
 8000ac6:	d109      	bne.n	8000adc <__libc_init_array+0x24>
 8000ac8:	4d0b      	ldr	r5, [pc, #44]	; (8000af8 <__libc_init_array+0x40>)
 8000aca:	4c0c      	ldr	r4, [pc, #48]	; (8000afc <__libc_init_array+0x44>)
 8000acc:	f000 f818 	bl	8000b00 <_init>
 8000ad0:	1b64      	subs	r4, r4, r5
 8000ad2:	10a4      	asrs	r4, r4, #2
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	42a6      	cmp	r6, r4
 8000ad8:	d105      	bne.n	8000ae6 <__libc_init_array+0x2e>
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
 8000adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae0:	4798      	blx	r3
 8000ae2:	3601      	adds	r6, #1
 8000ae4:	e7ee      	b.n	8000ac4 <__libc_init_array+0xc>
 8000ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aea:	4798      	blx	r3
 8000aec:	3601      	adds	r6, #1
 8000aee:	e7f2      	b.n	8000ad6 <__libc_init_array+0x1e>
 8000af0:	08000b24 	.word	0x08000b24
 8000af4:	08000b24 	.word	0x08000b24
 8000af8:	08000b24 	.word	0x08000b24
 8000afc:	08000b28 	.word	0x08000b28

08000b00 <_init>:
 8000b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b02:	bf00      	nop
 8000b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b06:	bc08      	pop	{r3}
 8000b08:	469e      	mov	lr, r3
 8000b0a:	4770      	bx	lr

08000b0c <_fini>:
 8000b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0e:	bf00      	nop
 8000b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b12:	bc08      	pop	{r3}
 8000b14:	469e      	mov	lr, r3
 8000b16:	4770      	bx	lr
