
STM32_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004a4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000668  08000670  00010670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000668  08000668  00010670  2**0
                  CONTENTS
  4 .ARM          00000000  08000668  08000668  00010670  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000668  08000670  00010670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000668  08000668  00010668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800066c  0800066c  0001066c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000670  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000670  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010670  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000106a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000909  00000000  00000000  000106e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000026e  00000000  00000000  00010fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  00011260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000072  00000000  00000000  00011308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000012e3  00000000  00000000  0001137a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000cec  00000000  00000000  0001265d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004ea0  00000000  00000000  00013349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000001cc  00000000  00000000  000181ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000183b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000650 	.word	0x08000650

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000650 	.word	0x08000650

08000204 <DRV_GPIO_Pclkcontrol>:
 * Peripheral clock control APIs
 *
 * 
 */
void DRV_GPIO_Pclkcontrol(GPIO_TypeDef_t* pGPIOx, EnOrDi_State EnOrDi)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi == ENABLE)
 8000210:	78fb      	ldrb	r3, [r7, #3]
 8000212:	2b01      	cmp	r3, #1
 8000214:	d157      	bne.n	80002c6 <DRV_GPIO_Pclkcontrol+0xc2>
    {
        if(pGPIOx == GPIOA) GPIOA_PCLK_EN();
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a59      	ldr	r2, [pc, #356]	; (8000380 <DRV_GPIO_Pclkcontrol+0x17c>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <DRV_GPIO_Pclkcontrol+0x28>
 800021e:	4b59      	ldr	r3, [pc, #356]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000222:	4a58      	ldr	r2, [pc, #352]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	6313      	str	r3, [r2, #48]	; 0x30
        else if(pGPIOx == GPIOF) GPIOF_PCLK_DI();
        else if(pGPIOx == GPIOG) GPIOG_PCLK_DI();
        else if(pGPIOx == GPIOH) GPIOH_PCLK_DI();
    }
    
}
 800022a:	e0a3      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOB) GPIOB_PCLK_EN();
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a56      	ldr	r2, [pc, #344]	; (8000388 <DRV_GPIO_Pclkcontrol+0x184>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <DRV_GPIO_Pclkcontrol+0x3e>
 8000234:	4b53      	ldr	r3, [pc, #332]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a52      	ldr	r2, [pc, #328]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000240:	e098      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOC) GPIOC_PCLK_EN();
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a51      	ldr	r2, [pc, #324]	; (800038c <DRV_GPIO_Pclkcontrol+0x188>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <DRV_GPIO_Pclkcontrol+0x54>
 800024a:	4b4e      	ldr	r3, [pc, #312]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4a4d      	ldr	r2, [pc, #308]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000250:	f043 0304 	orr.w	r3, r3, #4
 8000254:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000256:	e08d      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOD) GPIOD_PCLK_EN();
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a4d      	ldr	r2, [pc, #308]	; (8000390 <DRV_GPIO_Pclkcontrol+0x18c>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d106      	bne.n	800026e <DRV_GPIO_Pclkcontrol+0x6a>
 8000260:	4b48      	ldr	r3, [pc, #288]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a47      	ldr	r2, [pc, #284]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000266:	f043 0308 	orr.w	r3, r3, #8
 800026a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800026c:	e082      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOE) GPIOE_PCLK_EN();
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a48      	ldr	r2, [pc, #288]	; (8000394 <DRV_GPIO_Pclkcontrol+0x190>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <DRV_GPIO_Pclkcontrol+0x80>
 8000276:	4b43      	ldr	r3, [pc, #268]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027a:	4a42      	ldr	r2, [pc, #264]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 800027c:	f043 0310 	orr.w	r3, r3, #16
 8000280:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000282:	e077      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOF) GPIOF_PCLK_EN();
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a44      	ldr	r2, [pc, #272]	; (8000398 <DRV_GPIO_Pclkcontrol+0x194>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d106      	bne.n	800029a <DRV_GPIO_Pclkcontrol+0x96>
 800028c:	4b3d      	ldr	r3, [pc, #244]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4a3c      	ldr	r2, [pc, #240]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000292:	f043 0320 	orr.w	r3, r3, #32
 8000296:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000298:	e06c      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOG) GPIOG_PCLK_EN();
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a3f      	ldr	r2, [pc, #252]	; (800039c <DRV_GPIO_Pclkcontrol+0x198>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <DRV_GPIO_Pclkcontrol+0xac>
 80002a2:	4b38      	ldr	r3, [pc, #224]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a6:	4a37      	ldr	r2, [pc, #220]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 80002a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ae:	e061      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOH) GPIOH_PCLK_EN();
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a3b      	ldr	r2, [pc, #236]	; (80003a0 <DRV_GPIO_Pclkcontrol+0x19c>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d15d      	bne.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
 80002b8:	4b32      	ldr	r3, [pc, #200]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002bc:	4a31      	ldr	r2, [pc, #196]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 80002be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002c4:	e056      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        if(pGPIOx == GPIOA) GPIOA_PCLK_DI();
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a2d      	ldr	r2, [pc, #180]	; (8000380 <DRV_GPIO_Pclkcontrol+0x17c>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <DRV_GPIO_Pclkcontrol+0xd8>
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a2c      	ldr	r2, [pc, #176]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 80002d4:	f023 0301 	bic.w	r3, r3, #1
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002da:	e04b      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOB) GPIOB_PCLK_DI();
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a2a      	ldr	r2, [pc, #168]	; (8000388 <DRV_GPIO_Pclkcontrol+0x184>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d106      	bne.n	80002f2 <DRV_GPIO_Pclkcontrol+0xee>
 80002e4:	4b27      	ldr	r3, [pc, #156]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a26      	ldr	r2, [pc, #152]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 80002ea:	f023 0302 	bic.w	r3, r3, #2
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f0:	e040      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOC) GPIOC_PCLK_DI();
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a25      	ldr	r2, [pc, #148]	; (800038c <DRV_GPIO_Pclkcontrol+0x188>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <DRV_GPIO_Pclkcontrol+0x104>
 80002fa:	4b22      	ldr	r3, [pc, #136]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fe:	4a21      	ldr	r2, [pc, #132]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000300:	f023 0304 	bic.w	r3, r3, #4
 8000304:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000306:	e035      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOD) GPIOD_PCLK_DI();
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a21      	ldr	r2, [pc, #132]	; (8000390 <DRV_GPIO_Pclkcontrol+0x18c>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d106      	bne.n	800031e <DRV_GPIO_Pclkcontrol+0x11a>
 8000310:	4b1c      	ldr	r3, [pc, #112]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000314:	4a1b      	ldr	r2, [pc, #108]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000316:	f023 0308 	bic.w	r3, r3, #8
 800031a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031c:	e02a      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOE) GPIOE_PCLK_DI();
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a1c      	ldr	r2, [pc, #112]	; (8000394 <DRV_GPIO_Pclkcontrol+0x190>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <DRV_GPIO_Pclkcontrol+0x130>
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	4a16      	ldr	r2, [pc, #88]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 800032c:	f023 0310 	bic.w	r3, r3, #16
 8000330:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000332:	e01f      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOF) GPIOF_PCLK_DI();
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a18      	ldr	r2, [pc, #96]	; (8000398 <DRV_GPIO_Pclkcontrol+0x194>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <DRV_GPIO_Pclkcontrol+0x146>
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a10      	ldr	r2, [pc, #64]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000342:	f023 0320 	bic.w	r3, r3, #32
 8000346:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000348:	e014      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOG) GPIOG_PCLK_DI();
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a13      	ldr	r2, [pc, #76]	; (800039c <DRV_GPIO_Pclkcontrol+0x198>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <DRV_GPIO_Pclkcontrol+0x15c>
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a0b      	ldr	r2, [pc, #44]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 8000358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035e:	e009      	b.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
        else if(pGPIOx == GPIOH) GPIOH_PCLK_DI();
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a0f      	ldr	r2, [pc, #60]	; (80003a0 <DRV_GPIO_Pclkcontrol+0x19c>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d105      	bne.n	8000374 <DRV_GPIO_Pclkcontrol+0x170>
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a05      	ldr	r2, [pc, #20]	; (8000384 <DRV_GPIO_Pclkcontrol+0x180>)
 800036e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	40020000 	.word	0x40020000
 8000384:	40023800 	.word	0x40023800
 8000388:	40020400 	.word	0x40020400
 800038c:	40020800 	.word	0x40020800
 8000390:	40020c00 	.word	0x40020c00
 8000394:	40021000 	.word	0x40021000
 8000398:	40021400 	.word	0x40021400
 800039c:	40021800 	.word	0x40021800
 80003a0:	40021c00 	.word	0x40021c00

080003a4 <DRV_GPIO_Init>:
 * Peripheral clock control APIs
 *
 * 
 */
void DRV_GPIO_Init(GPIO_TypeDef_t* pGPIOx, GPIO_PinConfig_t* pGPIOPinCofig)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b087      	sub	sp, #28
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
    uint32_t temp; 
    // 1. Configure mode 
    if(pGPIOPinCofig->PinMode <= GPIO_ANALOG)
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	785b      	ldrb	r3, [r3, #1]
 80003b2:	2b03      	cmp	r3, #3
 80003b4:	d819      	bhi.n	80003ea <DRV_GPIO_Init+0x46>
    {
        temp = (pGPIOPinCofig->PinMode << (2*pGPIOPinCofig->PinNumber));
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	785b      	ldrb	r3, [r3, #1]
 80003ba:	461a      	mov	r2, r3
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	fa02 f303 	lsl.w	r3, r2, r3
 80003c6:	617b      	str	r3, [r7, #20]
        pGPIOx->MODER &= ~(0x03 << pGPIOPinCofig->PinNumber); // clear bit 
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	7812      	ldrb	r2, [r2, #0]
 80003d0:	4611      	mov	r1, r2
 80003d2:	2203      	movs	r2, #3
 80003d4:	408a      	lsls	r2, r1
 80003d6:	43d2      	mvns	r2, r2
 80003d8:	401a      	ands	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	601a      	str	r2, [r3, #0]
        pGPIOx->MODER |= temp; // set bit 
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	431a      	orrs	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        /* interrupts */
    }
    temp = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]

    // 2. Configure speed
    temp = (pGPIOPinCofig->PinSpeed << (2*pGPIOPinCofig->PinNumber));
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	789b      	ldrb	r3, [r3, #2]
 80003f2:	461a      	mov	r2, r3
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	005b      	lsls	r3, r3, #1
 80003fa:	fa02 f303 	lsl.w	r3, r2, r3
 80003fe:	617b      	str	r3, [r7, #20]
    pGPIOx->OSPEEDER &= ~(0x03 << pGPIOPinCofig->PinNumber); // clear bit 
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	683a      	ldr	r2, [r7, #0]
 8000406:	7812      	ldrb	r2, [r2, #0]
 8000408:	4611      	mov	r1, r2
 800040a:	2203      	movs	r2, #3
 800040c:	408a      	lsls	r2, r1
 800040e:	43d2      	mvns	r2, r2
 8000410:	401a      	ands	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	609a      	str	r2, [r3, #8]
    pGPIOx->OSPEEDER |= temp; // set bit 
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	689a      	ldr	r2, [r3, #8]
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	431a      	orrs	r2, r3
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	609a      	str	r2, [r3, #8]
    temp = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]

    // 3. Configure pull up pull down configuration
    temp = (pGPIOPinCofig->PinPUPDCtrl << (2*pGPIOPinCofig->PinNumber));
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	78db      	ldrb	r3, [r3, #3]
 800042a:	461a      	mov	r2, r3
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	fa02 f303 	lsl.w	r3, r2, r3
 8000436:	617b      	str	r3, [r7, #20]
    pGPIOx->PUPDR &= ~(0x03 << pGPIOPinCofig->PinNumber); // clear bit 
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	683a      	ldr	r2, [r7, #0]
 800043e:	7812      	ldrb	r2, [r2, #0]
 8000440:	4611      	mov	r1, r2
 8000442:	2203      	movs	r2, #3
 8000444:	408a      	lsls	r2, r1
 8000446:	43d2      	mvns	r2, r2
 8000448:	401a      	ands	r2, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	60da      	str	r2, [r3, #12]
    pGPIOx->PUPDR |= temp; //set bit 
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	68da      	ldr	r2, [r3, #12]
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	431a      	orrs	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	60da      	str	r2, [r3, #12]
    temp = 0;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]

    // 4. Configure output type 
    temp = (pGPIOPinCofig->PinOPType << pGPIOPinCofig->PinNumber);
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	791b      	ldrb	r3, [r3, #4]
 8000462:	461a      	mov	r2, r3
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	fa02 f303 	lsl.w	r3, r2, r3
 800046c:	617b      	str	r3, [r7, #20]
    pGPIOx->OTYPER &= ~(0x01 << pGPIOPinCofig->PinNumber); // clear bit 
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	683a      	ldr	r2, [r7, #0]
 8000474:	7812      	ldrb	r2, [r2, #0]
 8000476:	4611      	mov	r1, r2
 8000478:	2201      	movs	r2, #1
 800047a:	408a      	lsls	r2, r1
 800047c:	43d2      	mvns	r2, r2
 800047e:	401a      	ands	r2, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	605a      	str	r2, [r3, #4]
    pGPIOx->OTYPER |= temp; //set bit
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	685a      	ldr	r2, [r3, #4]
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	431a      	orrs	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	605a      	str	r2, [r3, #4]
    temp = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]

    // 5. Configure alternative function
    if(pGPIOPinCofig->PinAltFunction == GPIO_ALTERNATE)
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	795b      	ldrb	r3, [r3, #5]
 8000498:	2b02      	cmp	r3, #2
 800049a:	d12e      	bne.n	80004fa <DRV_GPIO_Init+0x156>
    {
        uint32_t temp1, temp2;
        temp1 = pGPIOPinCofig->PinNumber/8;
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	08db      	lsrs	r3, r3, #3
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	613b      	str	r3, [r7, #16]
        temp2 = pGPIOPinCofig->PinNumber%8;
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	f003 0307 	and.w	r3, r3, #7
 80004ae:	60fb      	str	r3, [r7, #12]
        pGPIOx->AFR[temp1] &= ~(0xFF << (4*temp2));
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	693a      	ldr	r2, [r7, #16]
 80004b4:	3208      	adds	r2, #8
 80004b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	0092      	lsls	r2, r2, #2
 80004be:	21ff      	movs	r1, #255	; 0xff
 80004c0:	fa01 f202 	lsl.w	r2, r1, r2
 80004c4:	43d2      	mvns	r2, r2
 80004c6:	ea03 0102 	and.w	r1, r3, r2
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	693a      	ldr	r2, [r7, #16]
 80004ce:	3208      	adds	r2, #8
 80004d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOx->AFR[temp1] |= (pGPIOPinCofig->PinAltFunction << (4*temp2));
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	693a      	ldr	r2, [r7, #16]
 80004d8:	3208      	adds	r2, #8
 80004da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004de:	683a      	ldr	r2, [r7, #0]
 80004e0:	7952      	ldrb	r2, [r2, #5]
 80004e2:	4611      	mov	r1, r2
 80004e4:	68fa      	ldr	r2, [r7, #12]
 80004e6:	0092      	lsls	r2, r2, #2
 80004e8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ec:	ea43 0102 	orr.w	r1, r3, r2
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	693a      	ldr	r2, [r7, #16]
 80004f4:	3208      	adds	r2, #8
 80004f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

}
 80004fa:	bf00      	nop
 80004fc:	371c      	adds	r7, #28
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <DRV_GPIO_WritePin>:
    uint16_t Value; 
    Value = (uint16_t) pGPIOx->IDR;
    return Value;
}
void DRV_GPIO_WritePin(GPIO_TypeDef_t* pGPIOx, uint8_t PinNumber ,Pin_State Value)
{
 8000506:	b480      	push	{r7}
 8000508:	b083      	sub	sp, #12
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	460b      	mov	r3, r1
 8000510:	70fb      	strb	r3, [r7, #3]
 8000512:	4613      	mov	r3, r2
 8000514:	70bb      	strb	r3, [r7, #2]
    if(Value == SET_PIN || Value == SET)
 8000516:	78bb      	ldrb	r3, [r7, #2]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d002      	beq.n	8000522 <DRV_GPIO_WritePin+0x1c>
 800051c:	78bb      	ldrb	r3, [r7, #2]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d109      	bne.n	8000536 <DRV_GPIO_WritePin+0x30>
    {
        pGPIOx->ODR |= (1<<PinNumber);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	78fa      	ldrb	r2, [r7, #3]
 8000528:	2101      	movs	r1, #1
 800052a:	fa01 f202 	lsl.w	r2, r1, r2
 800052e:	431a      	orrs	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	615a      	str	r2, [r3, #20]
 8000534:	e00a      	b.n	800054c <DRV_GPIO_WritePin+0x46>
    }
    else
    {
        pGPIOx->ODR &= ~(1<<PinNumber);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	78fa      	ldrb	r2, [r7, #3]
 800053c:	2101      	movs	r1, #1
 800053e:	fa01 f202 	lsl.w	r2, r1, r2
 8000542:	43d2      	mvns	r2, r2
 8000544:	401a      	ands	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	615a      	str	r2, [r3, #20]
    }
}
 800054a:	bf00      	nop
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <main>:
 */
#include <stm32f4xx.h>
#include <stm32f4xx_gpio_driver.h>
void GPIO_Init(void);
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
    GPIO_Init();
 800055c:	f000 f80a 	bl	8000574 <GPIO_Init>
    DRV_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2105      	movs	r1, #5
 8000564:	4802      	ldr	r0, [pc, #8]	; (8000570 <main+0x18>)
 8000566:	f7ff ffce 	bl	8000506 <DRV_GPIO_WritePin>
 800056a:	2300      	movs	r3, #0

}
 800056c:	4618      	mov	r0, r3
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40020000 	.word	0x40020000

08000574 <GPIO_Init>:

void GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
    GPIO_PinConfig_t GPIO_Struct = {0};
 800057a:	463b      	mov	r3, r7
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	809a      	strh	r2, [r3, #4]
    GPIO_Struct.PinNumber = GPIO_PIN_5;
 8000582:	2305      	movs	r3, #5
 8000584:	703b      	strb	r3, [r7, #0]
    GPIO_Struct.PinMode = GPIO_OUTPUT;
 8000586:	2301      	movs	r3, #1
 8000588:	707b      	strb	r3, [r7, #1]
    GPIO_Struct.PinSpeed = FAST;
 800058a:	2302      	movs	r3, #2
 800058c:	70bb      	strb	r3, [r7, #2]
    GPIO_Struct.PinOPType = PushPull;
 800058e:	2300      	movs	r3, #0
 8000590:	713b      	strb	r3, [r7, #4]
    GPIO_Struct.PinPUPDCtrl = NoPUPD;
 8000592:	2300      	movs	r3, #0
 8000594:	70fb      	strb	r3, [r7, #3]
    DRV_GPIO_Pclkcontrol(GPIOA, ENABLE);
 8000596:	2101      	movs	r1, #1
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <GPIO_Init+0x3c>)
 800059a:	f7ff fe33 	bl	8000204 <DRV_GPIO_Pclkcontrol>
    DRV_GPIO_Init(GPIOA, &GPIO_Struct);
 800059e:	463b      	mov	r3, r7
 80005a0:	4619      	mov	r1, r3
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <GPIO_Init+0x3c>)
 80005a4:	f7ff fefe 	bl	80003a4 <DRV_GPIO_Init>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40020000 	.word	0x40020000

080005b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b4:	480d      	ldr	r0, [pc, #52]	; (80005ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005bc:	480c      	ldr	r0, [pc, #48]	; (80005f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80005be:	490d      	ldr	r1, [pc, #52]	; (80005f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c0:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <LoopForever+0xe>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c4:	e002      	b.n	80005cc <LoopCopyDataInit>

080005c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ca:	3304      	adds	r3, #4

080005cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d0:	d3f9      	bcc.n	80005c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d2:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d4:	4c0a      	ldr	r4, [pc, #40]	; (8000600 <LoopForever+0x16>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d8:	e001      	b.n	80005de <LoopFillZerobss>

080005da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005dc:	3204      	adds	r2, #4

080005de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e0:	d3fb      	bcc.n	80005da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005e2:	f000 f811 	bl	8000608 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e6:	f7ff ffb7 	bl	8000558 <main>

080005ea <LoopForever>:

LoopForever:
  b LoopForever
 80005ea:	e7fe      	b.n	80005ea <LoopForever>
  ldr   r0, =_estack
 80005ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005f8:	08000670 	.word	0x08000670
  ldr r2, =_sbss
 80005fc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000600:	2000001c 	.word	0x2000001c

08000604 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000604:	e7fe      	b.n	8000604 <ADC_IRQHandler>
	...

08000608 <__libc_init_array>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	4d0d      	ldr	r5, [pc, #52]	; (8000640 <__libc_init_array+0x38>)
 800060c:	4c0d      	ldr	r4, [pc, #52]	; (8000644 <__libc_init_array+0x3c>)
 800060e:	1b64      	subs	r4, r4, r5
 8000610:	10a4      	asrs	r4, r4, #2
 8000612:	2600      	movs	r6, #0
 8000614:	42a6      	cmp	r6, r4
 8000616:	d109      	bne.n	800062c <__libc_init_array+0x24>
 8000618:	4d0b      	ldr	r5, [pc, #44]	; (8000648 <__libc_init_array+0x40>)
 800061a:	4c0c      	ldr	r4, [pc, #48]	; (800064c <__libc_init_array+0x44>)
 800061c:	f000 f818 	bl	8000650 <_init>
 8000620:	1b64      	subs	r4, r4, r5
 8000622:	10a4      	asrs	r4, r4, #2
 8000624:	2600      	movs	r6, #0
 8000626:	42a6      	cmp	r6, r4
 8000628:	d105      	bne.n	8000636 <__libc_init_array+0x2e>
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000630:	4798      	blx	r3
 8000632:	3601      	adds	r6, #1
 8000634:	e7ee      	b.n	8000614 <__libc_init_array+0xc>
 8000636:	f855 3b04 	ldr.w	r3, [r5], #4
 800063a:	4798      	blx	r3
 800063c:	3601      	adds	r6, #1
 800063e:	e7f2      	b.n	8000626 <__libc_init_array+0x1e>
 8000640:	08000668 	.word	0x08000668
 8000644:	08000668 	.word	0x08000668
 8000648:	08000668 	.word	0x08000668
 800064c:	0800066c 	.word	0x0800066c

08000650 <_init>:
 8000650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000652:	bf00      	nop
 8000654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000656:	bc08      	pop	{r3}
 8000658:	469e      	mov	lr, r3
 800065a:	4770      	bx	lr

0800065c <_fini>:
 800065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065e:	bf00      	nop
 8000660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000662:	bc08      	pop	{r3}
 8000664:	469e      	mov	lr, r3
 8000666:	4770      	bx	lr
