
STM32F446_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ec  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b0  080004b8  000104b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004b0  080004b0  000104b8  2**0
                  CONTENTS
  4 .ARM          00000000  080004b0  080004b0  000104b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004b0  080004b8  000104b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b0  080004b0  000104b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004b4  080004b4  000104b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004b8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004b8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000104b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006d5  00000000  00000000  000104e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000023c  00000000  00000000  00010bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00010df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000088  00000000  00000000  00010ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018be1  00000000  00000000  00010f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b69  00000000  00000000  00029b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a896  00000000  00000000  0002a67a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b4f10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001fc  00000000  00000000  000b4f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000498 	.word	0x08000498

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000498 	.word	0x08000498

08000204 <GPIO_Init>:
* @return      - None
*
* @note        - None
*****************************************************************/
void GPIO_Init(GPIO_Handle_t* pGPIOHandle)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
    uint8_t temp;
    /* 1. Configure the mode of the pin */
    if(pGPIOHandle->GPIO_PinCFG.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	795b      	ldrb	r3, [r3, #5]
 8000210:	2b03      	cmp	r3, #3
 8000212:	d820      	bhi.n	8000256 <GPIO_Init+0x52>
    {
        temp = (pGPIOHandle->GPIO_PinCFG.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinCFG.GPIO_PinNumber));
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	795b      	ldrb	r3, [r3, #5]
 8000218:	461a      	mov	r2, r3
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	791b      	ldrb	r3, [r3, #4]
 800021e:	005b      	lsls	r3, r3, #1
 8000220:	fa02 f303 	lsl.w	r3, r2, r3
 8000224:	73fb      	strb	r3, [r7, #15]
        pGPIOHandle->pGPIOx->MODER &=~ (0x3 << pGPIOHandle->GPIO_PinCFG.GPIO_PinNumber );
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	791b      	ldrb	r3, [r3, #4]
 8000230:	4619      	mov	r1, r3
 8000232:	2303      	movs	r3, #3
 8000234:	408b      	lsls	r3, r1
 8000236:	43db      	mvns	r3, r3
 8000238:	4619      	mov	r1, r3
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	400a      	ands	r2, r1
 8000240:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp; 
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	6819      	ldr	r1, [r3, #0]
 8000248:	7bfa      	ldrb	r2, [r7, #15]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	430a      	orrs	r2, r1
 8000250:	601a      	str	r2, [r3, #0]
        temp = 0;
 8000252:	2300      	movs	r3, #0
 8000254:	73fb      	strb	r3, [r7, #15]
    }
    /* 2. Configure the speed output of the pin*/
    temp = (pGPIOHandle->GPIO_PinCFG.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinCFG.GPIO_PinNumber));
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	799b      	ldrb	r3, [r3, #6]
 800025a:	461a      	mov	r2, r3
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	791b      	ldrb	r3, [r3, #4]
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	fa02 f303 	lsl.w	r3, r2, r3
 8000266:	73fb      	strb	r3, [r7, #15]
    pGPIOHandle->pGPIOx->OSPEEDR &=~ (0x3 << pGPIOHandle->GPIO_PinCFG.GPIO_PinNumber );
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	689a      	ldr	r2, [r3, #8]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	791b      	ldrb	r3, [r3, #4]
 8000272:	4619      	mov	r1, r3
 8000274:	2303      	movs	r3, #3
 8000276:	408b      	lsls	r3, r1
 8000278:	43db      	mvns	r3, r3
 800027a:	4619      	mov	r1, r3
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	400a      	ands	r2, r1
 8000282:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp; 
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	6899      	ldr	r1, [r3, #8]
 800028a:	7bfa      	ldrb	r2, [r7, #15]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	430a      	orrs	r2, r1
 8000292:	609a      	str	r2, [r3, #8]
    temp = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	73fb      	strb	r3, [r7, #15]
    /* 3. Configure the Pull Up and Pull Down setting*/
    temp = (pGPIOHandle->GPIO_PinCFG.GPIO_PuPd << (2 * pGPIOHandle->GPIO_PinCFG.GPIO_PinNumber));
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	79db      	ldrb	r3, [r3, #7]
 800029c:	461a      	mov	r2, r3
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	791b      	ldrb	r3, [r3, #4]
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	fa02 f303 	lsl.w	r3, r2, r3
 80002a8:	73fb      	strb	r3, [r7, #15]
    pGPIOHandle->pGPIOx->PUPDR &=~ (0x3 << pGPIOHandle->GPIO_PinCFG.GPIO_PinNumber );
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	68da      	ldr	r2, [r3, #12]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	791b      	ldrb	r3, [r3, #4]
 80002b4:	4619      	mov	r1, r3
 80002b6:	2303      	movs	r3, #3
 80002b8:	408b      	lsls	r3, r1
 80002ba:	43db      	mvns	r3, r3
 80002bc:	4619      	mov	r1, r3
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	400a      	ands	r2, r1
 80002c4:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp; 
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	68d9      	ldr	r1, [r3, #12]
 80002cc:	7bfa      	ldrb	r2, [r7, #15]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	430a      	orrs	r2, r1
 80002d4:	60da      	str	r2, [r3, #12]
    temp = 0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	73fb      	strb	r3, [r7, #15]
    /* 4. Configure the output type of the pin */
    temp = (pGPIOHandle->GPIO_PinCFG.GPIO_PinOPType << pGPIOHandle->GPIO_PinCFG.GPIO_PinNumber);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	7a1b      	ldrb	r3, [r3, #8]
 80002de:	461a      	mov	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	791b      	ldrb	r3, [r3, #4]
 80002e4:	fa02 f303 	lsl.w	r3, r2, r3
 80002e8:	73fb      	strb	r3, [r7, #15]
    pGPIOHandle->pGPIOx->OTYPER &=~ (0x1 << pGPIOHandle->GPIO_PinCFG.GPIO_PinNumber );
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	685a      	ldr	r2, [r3, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	791b      	ldrb	r3, [r3, #4]
 80002f4:	4619      	mov	r1, r3
 80002f6:	2301      	movs	r3, #1
 80002f8:	408b      	lsls	r3, r1
 80002fa:	43db      	mvns	r3, r3
 80002fc:	4619      	mov	r1, r3
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	400a      	ands	r2, r1
 8000304:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp; 
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	6859      	ldr	r1, [r3, #4]
 800030c:	7bfa      	ldrb	r2, [r7, #15]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	430a      	orrs	r2, r1
 8000314:	605a      	str	r2, [r3, #4]
    temp = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	73fb      	strb	r3, [r7, #15]
    /* 5 Configure alternate function */
    if((pGPIOHandle->GPIO_PinCFG.GPIO_PinMode == GPIO_MODE_ALT))
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	795b      	ldrb	r3, [r3, #5]
 800031e:	2b02      	cmp	r3, #2
 8000320:	d131      	bne.n	8000386 <GPIO_Init+0x182>
    {
        uint8_t temp1, temp2;
        temp1 = pGPIOHandle->GPIO_PinCFG.GPIO_PinNumber / 8;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	791b      	ldrb	r3, [r3, #4]
 8000326:	08db      	lsrs	r3, r3, #3
 8000328:	73bb      	strb	r3, [r7, #14]
        temp2 = pGPIOHandle->GPIO_PinCFG.GPIO_PinNumber % 8;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	791b      	ldrb	r3, [r3, #4]
 800032e:	f003 0307 	and.w	r3, r3, #7
 8000332:	737b      	strb	r3, [r7, #13]
        pGPIOHandle->pGPIOx->AFR[temp1] &=~ (0xFF << (4*temp2));
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	7bba      	ldrb	r2, [r7, #14]
 800033a:	3208      	adds	r2, #8
 800033c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000340:	7b7b      	ldrb	r3, [r7, #13]
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	22ff      	movs	r2, #255	; 0xff
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
 800034a:	43db      	mvns	r3, r3
 800034c:	4618      	mov	r0, r3
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	7bba      	ldrb	r2, [r7, #14]
 8000354:	4001      	ands	r1, r0
 8000356:	3208      	adds	r2, #8
 8000358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinCFG.GPIO_PinAlt << (4*temp2)); 
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	7bba      	ldrb	r2, [r7, #14]
 8000362:	3208      	adds	r2, #8
 8000364:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	7a5b      	ldrb	r3, [r3, #9]
 800036c:	461a      	mov	r2, r3
 800036e:	7b7b      	ldrb	r3, [r7, #13]
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	fa02 f303 	lsl.w	r3, r2, r3
 8000376:	4618      	mov	r0, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	7bba      	ldrb	r2, [r7, #14]
 800037e:	4301      	orrs	r1, r0
 8000380:	3208      	adds	r2, #8
 8000382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

}
 8000386:	bf00      	nop
 8000388:	3714      	adds	r7, #20
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr

08000390 <GPIO_PCLK_CTRL>:
* @return      - None
*
* @note        - None
*****************************************************************/
void GPIO_PCLK_CTRL(GPIO_TypeDef* pGPIOx)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
    else if(pGPIOx == GPIOD) 	RCC_AHB1ENR_GPIODEN;
    else if(pGPIOx == GPIOE) 	RCC_AHB1ENR_GPIOEEN;
    else if(pGPIOx == GPIOF) 	RCC_AHB1ENR_GPIOFEN;
    else if(pGPIOx == GPIOG) 	RCC_AHB1ENR_GPIOGEN;
    else if(pGPIOx == GPIOH) 	RCC_AHB1ENR_GPIOHEN;
}
 8000398:	bf00      	nop
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr

080003a2 <GPIO_WritePort>:
* @return      - None
*
* @note        - None
*****************************************************************/
void GPIO_WritePort(GPIO_TypeDef* pGPIOx, uint16_t Value)
{
 80003a2:	b480      	push	{r7}
 80003a4:	b083      	sub	sp, #12
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
 80003aa:	460b      	mov	r3, r1
 80003ac:	807b      	strh	r3, [r7, #2]
    pGPIOx->ODR = Value; 
 80003ae:	887a      	ldrh	r2, [r7, #2]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	615a      	str	r2, [r3, #20]
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr
	...

080003c0 <main>:
#include <stdint.h>
#include <stm32f446xx.h>
#include <stm32f446xx_gpio_driver.h>

int main(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
    GPIO_Handle_t GPIO_LED;
    GPIO_LED.pGPIOx = GPIOA;
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <main+0x38>)
 80003c8:	607b      	str	r3, [r7, #4]
    GPIO_LED.GPIO_PinCFG.GPIO_PinNumber = GPIO_PIN_5;
 80003ca:	2305      	movs	r3, #5
 80003cc:	723b      	strb	r3, [r7, #8]
    GPIO_LED.GPIO_PinCFG.GPIO_PinMode = GPIO_MODE_OUTPUT;
 80003ce:	2301      	movs	r3, #1
 80003d0:	727b      	strb	r3, [r7, #9]
    GPIO_LED.GPIO_PinCFG.GPIO_PinOPType = GPIO_OUTPUT_TYPE_PP;
 80003d2:	2300      	movs	r3, #0
 80003d4:	733b      	strb	r3, [r7, #12]
    GPIO_LED.GPIO_PinCFG.GPIO_PinSpeed = GPIO_SPEED_LOW;
 80003d6:	2300      	movs	r3, #0
 80003d8:	72bb      	strb	r3, [r7, #10]
    GPIO_LED.GPIO_PinCFG.GPIO_PuPd = GPIO_NO_PUPD;
 80003da:	2300      	movs	r3, #0
 80003dc:	72fb      	strb	r3, [r7, #11]

    GPIO_PCLK_CTRL(GPIOA);
 80003de:	4806      	ldr	r0, [pc, #24]	; (80003f8 <main+0x38>)
 80003e0:	f7ff ffd6 	bl	8000390 <GPIO_PCLK_CTRL>
    GPIO_Init(&GPIO_LED);
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff0c 	bl	8000204 <GPIO_Init>
    /* Loop forever */
	while(1)
    {
        GPIO_WritePort(GPIOA, GPIO_PIN_SET);
 80003ec:	2101      	movs	r1, #1
 80003ee:	4802      	ldr	r0, [pc, #8]	; (80003f8 <main+0x38>)
 80003f0:	f7ff ffd7 	bl	80003a2 <GPIO_WritePort>
 80003f4:	e7fa      	b.n	80003ec <main+0x2c>
 80003f6:	bf00      	nop
 80003f8:	40020000 	.word	0x40020000

080003fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003fc:	480d      	ldr	r0, [pc, #52]	; (8000434 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000400:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000404:	480c      	ldr	r0, [pc, #48]	; (8000438 <LoopForever+0x6>)
  ldr r1, =_edata
 8000406:	490d      	ldr	r1, [pc, #52]	; (800043c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000408:	4a0d      	ldr	r2, [pc, #52]	; (8000440 <LoopForever+0xe>)
  movs r3, #0
 800040a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800040c:	e002      	b.n	8000414 <LoopCopyDataInit>

0800040e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000412:	3304      	adds	r3, #4

08000414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000418:	d3f9      	bcc.n	800040e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041a:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <LoopForever+0x12>)
  ldr r4, =_ebss
 800041c:	4c0a      	ldr	r4, [pc, #40]	; (8000448 <LoopForever+0x16>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000420:	e001      	b.n	8000426 <LoopFillZerobss>

08000422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000424:	3204      	adds	r2, #4

08000426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000428:	d3fb      	bcc.n	8000422 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800042a:	f000 f811 	bl	8000450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800042e:	f7ff ffc7 	bl	80003c0 <main>

08000432 <LoopForever>:

LoopForever:
  b LoopForever
 8000432:	e7fe      	b.n	8000432 <LoopForever>
  ldr   r0, =_estack
 8000434:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800043c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000440:	080004b8 	.word	0x080004b8
  ldr r2, =_sbss
 8000444:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000448:	2000001c 	.word	0x2000001c

0800044c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800044c:	e7fe      	b.n	800044c <ADC_IRQHandler>
	...

08000450 <__libc_init_array>:
 8000450:	b570      	push	{r4, r5, r6, lr}
 8000452:	4d0d      	ldr	r5, [pc, #52]	; (8000488 <__libc_init_array+0x38>)
 8000454:	4c0d      	ldr	r4, [pc, #52]	; (800048c <__libc_init_array+0x3c>)
 8000456:	1b64      	subs	r4, r4, r5
 8000458:	10a4      	asrs	r4, r4, #2
 800045a:	2600      	movs	r6, #0
 800045c:	42a6      	cmp	r6, r4
 800045e:	d109      	bne.n	8000474 <__libc_init_array+0x24>
 8000460:	4d0b      	ldr	r5, [pc, #44]	; (8000490 <__libc_init_array+0x40>)
 8000462:	4c0c      	ldr	r4, [pc, #48]	; (8000494 <__libc_init_array+0x44>)
 8000464:	f000 f818 	bl	8000498 <_init>
 8000468:	1b64      	subs	r4, r4, r5
 800046a:	10a4      	asrs	r4, r4, #2
 800046c:	2600      	movs	r6, #0
 800046e:	42a6      	cmp	r6, r4
 8000470:	d105      	bne.n	800047e <__libc_init_array+0x2e>
 8000472:	bd70      	pop	{r4, r5, r6, pc}
 8000474:	f855 3b04 	ldr.w	r3, [r5], #4
 8000478:	4798      	blx	r3
 800047a:	3601      	adds	r6, #1
 800047c:	e7ee      	b.n	800045c <__libc_init_array+0xc>
 800047e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000482:	4798      	blx	r3
 8000484:	3601      	adds	r6, #1
 8000486:	e7f2      	b.n	800046e <__libc_init_array+0x1e>
 8000488:	080004b0 	.word	0x080004b0
 800048c:	080004b0 	.word	0x080004b0
 8000490:	080004b0 	.word	0x080004b0
 8000494:	080004b4 	.word	0x080004b4

08000498 <_init>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	bf00      	nop
 800049c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049e:	bc08      	pop	{r3}
 80004a0:	469e      	mov	lr, r3
 80004a2:	4770      	bx	lr

080004a4 <_fini>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr
